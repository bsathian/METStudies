// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/hadoop/cms/store/user/smay/ProjectMetis/ZZ_TuneCP5_13TeV-pythia8_RunIIFall17MiniAOD-94X_mc2017_realistic_v10-v1_MINIAODSIM_CMS4_V00-00-06_allPfCands/merged_ntuple_1.root", "Events", "CMS3", "tas", "cms3")

#ifndef CMS3_H
#define CMS3_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class CMS3 {
 private: 
 protected: 
  unsigned int index;
  vector<string> genweightsID_;
  TBranch *genweightsID_branch;
  bool     genweightsID_isLoaded;
  TBits    hlt_bits_;
  TBranch *hlt_bits_branch;
  bool     hlt_bits_isLoaded;
  vector<TString> evt_CMS3tag_;
  TBranch *evt_CMS3tag_branch;
  bool     evt_CMS3tag_isLoaded;
  vector<TString> evt_dataset_;
  TBranch *evt_dataset_branch;
  bool     evt_dataset_isLoaded;
  vector<TString> hlt_trigNames_;
  TBranch *hlt_trigNames_branch;
  bool     hlt_trigNames_isLoaded;
  vector<TString> pfjets_bDiscriminatorNames_;
  TBranch *pfjets_bDiscriminatorNames_branch;
  bool     pfjets_bDiscriminatorNames_isLoaded;
  vector<TString> pfjets_puppi_bDiscriminatorNames_;
  TBranch *pfjets_puppi_bDiscriminatorNames_branch;
  bool     pfjets_puppi_bDiscriminatorNames_isLoaded;
  vector<TString> taus_pf_IDnames_;
  TBranch *taus_pf_IDnames_branch;
  bool     taus_pf_IDnames_isLoaded;
  bool     evt_cscTightHaloId_;
  TBranch *evt_cscTightHaloId_branch;
  bool     evt_cscTightHaloId_isLoaded;
  bool     evt_hbheFilter_;
  TBranch *evt_hbheFilter_branch;
  bool     evt_hbheFilter_isLoaded;
  bool     filt_chargedHadronTrackResolution_;
  TBranch *filt_chargedHadronTrackResolution_branch;
  bool     filt_chargedHadronTrackResolution_isLoaded;
  bool     filt_cscBeamHalo_;
  TBranch *filt_cscBeamHalo_branch;
  bool     filt_cscBeamHalo_isLoaded;
  bool     filt_cscBeamHalo2015_;
  TBranch *filt_cscBeamHalo2015_branch;
  bool     filt_cscBeamHalo2015_isLoaded;
  bool     filt_cscBeamHaloTrkMuUnveto_;
  TBranch *filt_cscBeamHaloTrkMuUnveto_branch;
  bool     filt_cscBeamHaloTrkMuUnveto_isLoaded;
  bool     filt_ecalBoundaryEnergy_;
  TBranch *filt_ecalBoundaryEnergy_branch;
  bool     filt_ecalBoundaryEnergy_isLoaded;
  bool     filt_ecalLaser_;
  TBranch *filt_ecalLaser_branch;
  bool     filt_ecalLaser_isLoaded;
  bool     filt_ecalTP_;
  TBranch *filt_ecalTP_branch;
  bool     filt_ecalTP_isLoaded;
  bool     filt_eeBadSc_;
  TBranch *filt_eeBadSc_branch;
  bool     filt_eeBadSc_isLoaded;
  bool     filt_globalSuperTightHalo2016_;
  TBranch *filt_globalSuperTightHalo2016_branch;
  bool     filt_globalSuperTightHalo2016_isLoaded;
  bool     filt_globalTightHalo2016_;
  TBranch *filt_globalTightHalo2016_branch;
  bool     filt_globalTightHalo2016_isLoaded;
  bool     filt_goodVertices_;
  TBranch *filt_goodVertices_branch;
  bool     filt_goodVertices_isLoaded;
  bool     filt_hbheNoise_;
  TBranch *filt_hbheNoise_branch;
  bool     filt_hbheNoise_isLoaded;
  bool     filt_hbheNoiseIso_;
  TBranch *filt_hbheNoiseIso_branch;
  bool     filt_hbheNoiseIso_isLoaded;
  bool     filt_hcalLaser_;
  TBranch *filt_hcalLaser_branch;
  bool     filt_hcalLaser_isLoaded;
  bool     filt_hcalStrip_;
  TBranch *filt_hcalStrip_branch;
  bool     filt_hcalStrip_isLoaded;
  bool     filt_metfilter_;
  TBranch *filt_metfilter_branch;
  bool     filt_metfilter_isLoaded;
  bool     filt_muonBadTrack_;
  TBranch *filt_muonBadTrack_branch;
  bool     filt_muonBadTrack_isLoaded;
  bool     filt_trackingFailure_;
  TBranch *filt_trackingFailure_branch;
  bool     filt_trackingFailure_isLoaded;
  bool     filt_trkPOGFilters_;
  TBranch *filt_trkPOGFilters_branch;
  bool     filt_trkPOGFilters_isLoaded;
  bool     filt_trkPOG_logErrorTooManyClusters_;
  TBranch *filt_trkPOG_logErrorTooManyClusters_branch;
  bool     filt_trkPOG_logErrorTooManyClusters_isLoaded;
  bool     filt_trkPOG_manystripclus53X_;
  TBranch *filt_trkPOG_manystripclus53X_branch;
  bool     filt_trkPOG_manystripclus53X_isLoaded;
  bool     filt_trkPOG_toomanystripclus53X_;
  TBranch *filt_trkPOG_toomanystripclus53X_branch;
  bool     filt_trkPOG_toomanystripclus53X_isLoaded;
  vector<bool> els_conv_vtx_flag_;
  TBranch *els_conv_vtx_flag_branch;
  bool     els_conv_vtx_flag_isLoaded;
  vector<bool> els_isGsfCtfScPixChargeConsistent_;
  TBranch *els_isGsfCtfScPixChargeConsistent_branch;
  bool     els_isGsfCtfScPixChargeConsistent_isLoaded;
  vector<bool> genps_fromHardProcessBeforeFSR_;
  TBranch *genps_fromHardProcessBeforeFSR_branch;
  bool     genps_fromHardProcessBeforeFSR_isLoaded;
  vector<bool> genps_fromHardProcessDecayed_;
  TBranch *genps_fromHardProcessDecayed_branch;
  bool     genps_fromHardProcessDecayed_isLoaded;
  vector<bool> genps_fromHardProcessFinalState_;
  TBranch *genps_fromHardProcessFinalState_branch;
  bool     genps_fromHardProcessFinalState_isLoaded;
  vector<bool> genps_isDirectHardProcessTauDecayProductFinalState_;
  TBranch *genps_isDirectHardProcessTauDecayProductFinalState_branch;
  bool     genps_isDirectHardProcessTauDecayProductFinalState_isLoaded;
  vector<bool> genps_isDirectPromptTauDecayProductFinalState_;
  TBranch *genps_isDirectPromptTauDecayProductFinalState_branch;
  bool     genps_isDirectPromptTauDecayProductFinalState_isLoaded;
  vector<bool> genps_isHardProcess_;
  TBranch *genps_isHardProcess_branch;
  bool     genps_isHardProcess_isLoaded;
  vector<bool> genps_isLastCopy_;
  TBranch *genps_isLastCopy_branch;
  bool     genps_isLastCopy_isLoaded;
  vector<bool> genps_isLastCopyBeforeFSR_;
  TBranch *genps_isLastCopyBeforeFSR_branch;
  bool     genps_isLastCopyBeforeFSR_isLoaded;
  vector<bool> genps_isMostlyLikePythia6Status3_;
  TBranch *genps_isMostlyLikePythia6Status3_branch;
  bool     genps_isMostlyLikePythia6Status3_isLoaded;
  vector<bool> genps_isPromptDecayed_;
  TBranch *genps_isPromptDecayed_branch;
  bool     genps_isPromptDecayed_isLoaded;
  vector<bool> genps_isPromptFinalState_;
  TBranch *genps_isPromptFinalState_branch;
  bool     genps_isPromptFinalState_isLoaded;
  vector<bool> isotracks_isHighPurityTrack_;
  TBranch *isotracks_isHighPurityTrack_branch;
  bool     isotracks_isHighPurityTrack_isLoaded;
  vector<bool> isotracks_isPFCand_;
  TBranch *isotracks_isPFCand_branch;
  bool     isotracks_isPFCand_isLoaded;
  vector<bool> isotracks_isTightTrack_;
  TBranch *isotracks_isTightTrack_branch;
  bool     isotracks_isTightTrack_isLoaded;
  vector<bool> pfcands_isGlobalMuon_;
  TBranch *pfcands_isGlobalMuon_branch;
  bool     pfcands_isGlobalMuon_isLoaded;
  vector<bool> pfcands_isStandAloneMuon_;
  TBranch *pfcands_isStandAloneMuon_branch;
  bool     pfcands_isStandAloneMuon_isLoaded;
  vector<bool> pfcands_trackHighPurity_;
  TBranch *pfcands_trackHighPurity_branch;
  bool     pfcands_trackHighPurity_isLoaded;
  vector<bool> photons_haspixelSeed_;
  TBranch *photons_haspixelSeed_branch;
  bool     photons_haspixelSeed_isLoaded;
  vector<bool> photons_passElectronVeto_;
  TBranch *photons_passElectronVeto_branch;
  bool     photons_passElectronVeto_isLoaded;
  float    evt_bField_;
  TBranch *evt_bField_branch;
  bool     evt_bField_isLoaded;
  float    evt_instantLumi_;
  TBranch *evt_instantLumi_branch;
  bool     evt_instantLumi_isLoaded;
  float    evt_instantLumiErr_;
  TBranch *evt_instantLumiErr_branch;
  bool     evt_instantLumiErr_isLoaded;
  float    evt_lumiFill_;
  TBranch *evt_lumiFill_branch;
  bool     evt_lumiFill_isLoaded;
  float    evt_lumiRun_;
  TBranch *evt_lumiRun_branch;
  bool     evt_lumiRun_isLoaded;
  float    evt_pileup_;
  TBranch *evt_pileup_branch;
  bool     evt_pileup_isLoaded;
  float    evt_pileupRMS_;
  TBranch *evt_pileupRMS_branch;
  bool     evt_pileupRMS_isLoaded;
  float    evt_fixgrid_all_rho_;
  TBranch *evt_fixgrid_all_rho_branch;
  bool     evt_fixgrid_all_rho_isLoaded;
  float    evt_fixgridfastjet_allcalo_rho_;
  TBranch *evt_fixgridfastjet_allcalo_rho_branch;
  bool     evt_fixgridfastjet_allcalo_rho_isLoaded;
  float    evt_fixgridfastjet_central_rho_;
  TBranch *evt_fixgridfastjet_central_rho_branch;
  bool     evt_fixgridfastjet_central_rho_isLoaded;
  float    evt_fixgridfastjet_all_rho_;
  TBranch *evt_fixgridfastjet_all_rho_branch;
  bool     evt_fixgridfastjet_all_rho_isLoaded;
  float    evt_fixgridfastjet_centralcalo_rho_;
  TBranch *evt_fixgridfastjet_centralcalo_rho_branch;
  bool     evt_fixgridfastjet_centralcalo_rho_isLoaded;
  float    evt_fixgridfastjet_centralchargedpileup_rho_;
  TBranch *evt_fixgridfastjet_centralchargedpileup_rho_branch;
  bool     evt_fixgridfastjet_centralchargedpileup_rho_isLoaded;
  float    evt_fixgridfastjet_centralneutral_rho_;
  TBranch *evt_fixgridfastjet_centralneutral_rho_branch;
  bool     evt_fixgridfastjet_centralneutral_rho_isLoaded;
  float    evt_kfactor_;
  TBranch *evt_kfactor_branch;
  bool     evt_kfactor_isLoaded;
  float    evt_scale1fb_;
  TBranch *evt_scale1fb_branch;
  bool     evt_scale1fb_isLoaded;
  float    evt_xsec_excl_;
  TBranch *evt_xsec_excl_branch;
  bool     evt_xsec_excl_isLoaded;
  float    evt_xsec_incl_;
  TBranch *evt_xsec_incl_branch;
  bool     evt_xsec_incl_isLoaded;
  float    genps_alphaQCD_;
  TBranch *genps_alphaQCD_branch;
  bool     genps_alphaQCD_isLoaded;
  float    genps_pthat_;
  TBranch *genps_pthat_branch;
  bool     genps_pthat_isLoaded;
  float    genps_qScale_;
  TBranch *genps_qScale_branch;
  bool     genps_qScale_isLoaded;
  float    genps_weight_;
  TBranch *genps_weight_branch;
  bool     genps_weight_isLoaded;
  float    gen_sumEt_;
  TBranch *gen_sumEt_branch;
  bool     gen_sumEt_isLoaded;
  float    pdfinfo_pdf1_;
  TBranch *pdfinfo_pdf1_branch;
  bool     pdfinfo_pdf1_isLoaded;
  float    pdfinfo_pdf2_;
  TBranch *pdfinfo_pdf2_branch;
  bool     pdfinfo_pdf2_isLoaded;
  float    pdfinfo_scale_;
  TBranch *pdfinfo_scale_branch;
  bool     pdfinfo_scale_isLoaded;
  float    pdfinfo_x1_;
  TBranch *pdfinfo_x1_branch;
  bool     pdfinfo_x1_isLoaded;
  float    pdfinfo_x2_;
  TBranch *pdfinfo_x2_branch;
  bool     pdfinfo_x2_isLoaded;
  float    evt_calomet_;
  TBranch *evt_calomet_branch;
  bool     evt_calomet_isLoaded;
  float    evt_calometPhi_;
  TBranch *evt_calometPhi_branch;
  bool     evt_calometPhi_isLoaded;
  float    evt_pfmet_;
  TBranch *evt_pfmet_branch;
  bool     evt_pfmet_isLoaded;
  float    evt_pfmet_ElectronEnDown_;
  TBranch *evt_pfmet_ElectronEnDown_branch;
  bool     evt_pfmet_ElectronEnDown_isLoaded;
  float    evt_pfmet_ElectronEnUp_;
  TBranch *evt_pfmet_ElectronEnUp_branch;
  bool     evt_pfmet_ElectronEnUp_isLoaded;
  float    evt_pfmet_JetEnDown_;
  TBranch *evt_pfmet_JetEnDown_branch;
  bool     evt_pfmet_JetEnDown_isLoaded;
  float    evt_pfmet_JetEnUp_;
  TBranch *evt_pfmet_JetEnUp_branch;
  bool     evt_pfmet_JetEnUp_isLoaded;
  float    evt_pfmet_JetResDown_;
  TBranch *evt_pfmet_JetResDown_branch;
  bool     evt_pfmet_JetResDown_isLoaded;
  float    evt_pfmet_JetResUp_;
  TBranch *evt_pfmet_JetResUp_branch;
  bool     evt_pfmet_JetResUp_isLoaded;
  float    evt_pfmet_MuonEnDown_;
  TBranch *evt_pfmet_MuonEnDown_branch;
  bool     evt_pfmet_MuonEnDown_isLoaded;
  float    evt_pfmet_MuonEnUp_;
  TBranch *evt_pfmet_MuonEnUp_branch;
  bool     evt_pfmet_MuonEnUp_isLoaded;
  float    evt_pfmetPhi_;
  TBranch *evt_pfmetPhi_branch;
  bool     evt_pfmetPhi_isLoaded;
  float    evt_pfmetPhi_ElectronEnDown_;
  TBranch *evt_pfmetPhi_ElectronEnDown_branch;
  bool     evt_pfmetPhi_ElectronEnDown_isLoaded;
  float    evt_pfmetPhi_ElectronEnUp_;
  TBranch *evt_pfmetPhi_ElectronEnUp_branch;
  bool     evt_pfmetPhi_ElectronEnUp_isLoaded;
  float    evt_pfmetPhi_JetEnDown_;
  TBranch *evt_pfmetPhi_JetEnDown_branch;
  bool     evt_pfmetPhi_JetEnDown_isLoaded;
  float    evt_pfmetPhi_JetEnUp_;
  TBranch *evt_pfmetPhi_JetEnUp_branch;
  bool     evt_pfmetPhi_JetEnUp_isLoaded;
  float    evt_pfmetPhi_JetResDown_;
  TBranch *evt_pfmetPhi_JetResDown_branch;
  bool     evt_pfmetPhi_JetResDown_isLoaded;
  float    evt_pfmetPhi_JetResUp_;
  TBranch *evt_pfmetPhi_JetResUp_branch;
  bool     evt_pfmetPhi_JetResUp_isLoaded;
  float    evt_pfmetPhi_MuonEnDown_;
  TBranch *evt_pfmetPhi_MuonEnDown_branch;
  bool     evt_pfmetPhi_MuonEnDown_isLoaded;
  float    evt_pfmetPhi_MuonEnUp_;
  TBranch *evt_pfmetPhi_MuonEnUp_branch;
  bool     evt_pfmetPhi_MuonEnUp_isLoaded;
  float    evt_pfmetPhi_PhotonEnDown_;
  TBranch *evt_pfmetPhi_PhotonEnDown_branch;
  bool     evt_pfmetPhi_PhotonEnDown_isLoaded;
  float    evt_pfmetPhi_PhotonEnUp_;
  TBranch *evt_pfmetPhi_PhotonEnUp_branch;
  bool     evt_pfmetPhi_PhotonEnUp_isLoaded;
  float    evt_pfmetPhi_TauEnDown_;
  TBranch *evt_pfmetPhi_TauEnDown_branch;
  bool     evt_pfmetPhi_TauEnDown_isLoaded;
  float    evt_pfmetPhi_TauEnUp_;
  TBranch *evt_pfmetPhi_TauEnUp_branch;
  bool     evt_pfmetPhi_TauEnUp_isLoaded;
  float    evt_pfmetPhi_UnclusteredEnDown_;
  TBranch *evt_pfmetPhi_UnclusteredEnDown_branch;
  bool     evt_pfmetPhi_UnclusteredEnDown_isLoaded;
  float    evt_pfmetPhi_UnclusteredEnUp_;
  TBranch *evt_pfmetPhi_UnclusteredEnUp_branch;
  bool     evt_pfmetPhi_UnclusteredEnUp_isLoaded;
  float    evt_pfmetPhi_raw_;
  TBranch *evt_pfmetPhi_raw_branch;
  bool     evt_pfmetPhi_raw_isLoaded;
  float    evt_pfmet_PhotonEnDown_;
  TBranch *evt_pfmet_PhotonEnDown_branch;
  bool     evt_pfmet_PhotonEnDown_isLoaded;
  float    evt_pfmet_PhotonEnUp_;
  TBranch *evt_pfmet_PhotonEnUp_branch;
  bool     evt_pfmet_PhotonEnUp_isLoaded;
  float    evt_pfmetSig_;
  TBranch *evt_pfmetSig_branch;
  bool     evt_pfmetSig_isLoaded;
  float    evt_pfmetSignificance_;
  TBranch *evt_pfmetSignificance_branch;
  bool     evt_pfmetSignificance_isLoaded;
  float    evt_pfmet_TauEnDown_;
  TBranch *evt_pfmet_TauEnDown_branch;
  bool     evt_pfmet_TauEnDown_isLoaded;
  float    evt_pfmet_TauEnUp_;
  TBranch *evt_pfmet_TauEnUp_branch;
  bool     evt_pfmet_TauEnUp_isLoaded;
  float    evt_pfmet_UnclusteredEnDown_;
  TBranch *evt_pfmet_UnclusteredEnDown_branch;
  bool     evt_pfmet_UnclusteredEnDown_isLoaded;
  float    evt_pfmet_UnclusteredEnUp_;
  TBranch *evt_pfmet_UnclusteredEnUp_branch;
  bool     evt_pfmet_UnclusteredEnUp_isLoaded;
  float    evt_pfmet_raw_;
  TBranch *evt_pfmet_raw_branch;
  bool     evt_pfmet_raw_isLoaded;
  float    evt_pfsumet_;
  TBranch *evt_pfsumet_branch;
  bool     evt_pfsumet_isLoaded;
  float    evt_pfsumet_raw_;
  TBranch *evt_pfsumet_raw_branch;
  bool     evt_pfsumet_raw_isLoaded;
  float    gen_met_;
  TBranch *gen_met_branch;
  bool     gen_met_isLoaded;
  float    gen_metPhi_;
  TBranch *gen_metPhi_branch;
  bool     gen_metPhi_isLoaded;
  float    evt_puppi_calomet_;
  TBranch *evt_puppi_calomet_branch;
  bool     evt_puppi_calomet_isLoaded;
  float    evt_puppi_calometPhi_;
  TBranch *evt_puppi_calometPhi_branch;
  bool     evt_puppi_calometPhi_isLoaded;
  float    evt_puppi_pfmet_;
  TBranch *evt_puppi_pfmet_branch;
  bool     evt_puppi_pfmet_isLoaded;
  float    evt_puppi_pfmet_ElectronEnDown_;
  TBranch *evt_puppi_pfmet_ElectronEnDown_branch;
  bool     evt_puppi_pfmet_ElectronEnDown_isLoaded;
  float    evt_puppi_pfmet_ElectronEnUp_;
  TBranch *evt_puppi_pfmet_ElectronEnUp_branch;
  bool     evt_puppi_pfmet_ElectronEnUp_isLoaded;
  float    evt_puppi_pfmet_JetEnDown_;
  TBranch *evt_puppi_pfmet_JetEnDown_branch;
  bool     evt_puppi_pfmet_JetEnDown_isLoaded;
  float    evt_puppi_pfmet_JetEnUp_;
  TBranch *evt_puppi_pfmet_JetEnUp_branch;
  bool     evt_puppi_pfmet_JetEnUp_isLoaded;
  float    evt_puppi_pfmet_JetResDown_;
  TBranch *evt_puppi_pfmet_JetResDown_branch;
  bool     evt_puppi_pfmet_JetResDown_isLoaded;
  float    evt_puppi_pfmet_JetResUp_;
  TBranch *evt_puppi_pfmet_JetResUp_branch;
  bool     evt_puppi_pfmet_JetResUp_isLoaded;
  float    evt_puppi_pfmet_MuonEnDown_;
  TBranch *evt_puppi_pfmet_MuonEnDown_branch;
  bool     evt_puppi_pfmet_MuonEnDown_isLoaded;
  float    evt_puppi_pfmet_MuonEnUp_;
  TBranch *evt_puppi_pfmet_MuonEnUp_branch;
  bool     evt_puppi_pfmet_MuonEnUp_isLoaded;
  float    evt_puppi_pfmetPhi_;
  TBranch *evt_puppi_pfmetPhi_branch;
  bool     evt_puppi_pfmetPhi_isLoaded;
  float    evt_puppi_pfmetPhi_ElectronEnDown_;
  TBranch *evt_puppi_pfmetPhi_ElectronEnDown_branch;
  bool     evt_puppi_pfmetPhi_ElectronEnDown_isLoaded;
  float    evt_puppi_pfmetPhi_ElectronEnUp_;
  TBranch *evt_puppi_pfmetPhi_ElectronEnUp_branch;
  bool     evt_puppi_pfmetPhi_ElectronEnUp_isLoaded;
  float    evt_puppi_pfmetPhi_JetEnDown_;
  TBranch *evt_puppi_pfmetPhi_JetEnDown_branch;
  bool     evt_puppi_pfmetPhi_JetEnDown_isLoaded;
  float    evt_puppi_pfmetPhi_JetEnUp_;
  TBranch *evt_puppi_pfmetPhi_JetEnUp_branch;
  bool     evt_puppi_pfmetPhi_JetEnUp_isLoaded;
  float    evt_puppi_pfmetPhi_JetResDown_;
  TBranch *evt_puppi_pfmetPhi_JetResDown_branch;
  bool     evt_puppi_pfmetPhi_JetResDown_isLoaded;
  float    evt_puppi_pfmetPhi_JetResUp_;
  TBranch *evt_puppi_pfmetPhi_JetResUp_branch;
  bool     evt_puppi_pfmetPhi_JetResUp_isLoaded;
  float    evt_puppi_pfmetPhi_MuonEnDown_;
  TBranch *evt_puppi_pfmetPhi_MuonEnDown_branch;
  bool     evt_puppi_pfmetPhi_MuonEnDown_isLoaded;
  float    evt_puppi_pfmetPhi_MuonEnUp_;
  TBranch *evt_puppi_pfmetPhi_MuonEnUp_branch;
  bool     evt_puppi_pfmetPhi_MuonEnUp_isLoaded;
  float    evt_puppi_pfmetPhi_PhotonEnDown_;
  TBranch *evt_puppi_pfmetPhi_PhotonEnDown_branch;
  bool     evt_puppi_pfmetPhi_PhotonEnDown_isLoaded;
  float    evt_puppi_pfmetPhi_PhotonEnUp_;
  TBranch *evt_puppi_pfmetPhi_PhotonEnUp_branch;
  bool     evt_puppi_pfmetPhi_PhotonEnUp_isLoaded;
  float    evt_puppi_pfmetPhi_TauEnDown_;
  TBranch *evt_puppi_pfmetPhi_TauEnDown_branch;
  bool     evt_puppi_pfmetPhi_TauEnDown_isLoaded;
  float    evt_puppi_pfmetPhi_TauEnUp_;
  TBranch *evt_puppi_pfmetPhi_TauEnUp_branch;
  bool     evt_puppi_pfmetPhi_TauEnUp_isLoaded;
  float    evt_puppi_pfmetPhi_UnclusteredEnDown_;
  TBranch *evt_puppi_pfmetPhi_UnclusteredEnDown_branch;
  bool     evt_puppi_pfmetPhi_UnclusteredEnDown_isLoaded;
  float    evt_puppi_pfmetPhi_UnclusteredEnUp_;
  TBranch *evt_puppi_pfmetPhi_UnclusteredEnUp_branch;
  bool     evt_puppi_pfmetPhi_UnclusteredEnUp_isLoaded;
  float    evt_puppi_pfmetPhi_raw_;
  TBranch *evt_puppi_pfmetPhi_raw_branch;
  bool     evt_puppi_pfmetPhi_raw_isLoaded;
  float    evt_puppi_pfmet_PhotonEnDown_;
  TBranch *evt_puppi_pfmet_PhotonEnDown_branch;
  bool     evt_puppi_pfmet_PhotonEnDown_isLoaded;
  float    evt_puppi_pfmet_PhotonEnUp_;
  TBranch *evt_puppi_pfmet_PhotonEnUp_branch;
  bool     evt_puppi_pfmet_PhotonEnUp_isLoaded;
  float    evt_puppi_pfmetSig_;
  TBranch *evt_puppi_pfmetSig_branch;
  bool     evt_puppi_pfmetSig_isLoaded;
  float    evt_puppi_pfmetSignificance_;
  TBranch *evt_puppi_pfmetSignificance_branch;
  bool     evt_puppi_pfmetSignificance_isLoaded;
  float    evt_puppi_pfmet_TauEnDown_;
  TBranch *evt_puppi_pfmet_TauEnDown_branch;
  bool     evt_puppi_pfmet_TauEnDown_isLoaded;
  float    evt_puppi_pfmet_TauEnUp_;
  TBranch *evt_puppi_pfmet_TauEnUp_branch;
  bool     evt_puppi_pfmet_TauEnUp_isLoaded;
  float    evt_puppi_pfmet_UnclusteredEnDown_;
  TBranch *evt_puppi_pfmet_UnclusteredEnDown_branch;
  bool     evt_puppi_pfmet_UnclusteredEnDown_isLoaded;
  float    evt_puppi_pfmet_UnclusteredEnUp_;
  TBranch *evt_puppi_pfmet_UnclusteredEnUp_branch;
  bool     evt_puppi_pfmet_UnclusteredEnUp_isLoaded;
  float    evt_puppi_pfmet_raw_;
  TBranch *evt_puppi_pfmet_raw_branch;
  bool     evt_puppi_pfmet_raw_isLoaded;
  float    evt_puppi_pfsumet_;
  TBranch *evt_puppi_pfsumet_branch;
  bool     evt_puppi_pfsumet_isLoaded;
  float    evt_puppi_pfsumet_raw_;
  TBranch *evt_puppi_pfsumet_raw_branch;
  bool     evt_puppi_pfsumet_raw_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_mc_motherp4_;
  TBranch *els_mc_motherp4_branch;
  bool     els_mc_motherp4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_mc_p4_;
  TBranch *els_mc_p4_branch;
  bool     els_mc_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_mc_motherp4_;
  TBranch *mus_mc_motherp4_branch;
  bool     mus_mc_motherp4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_mc_p4_;
  TBranch *mus_mc_p4_branch;
  bool     mus_mc_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfjets_mc_p4_;
  TBranch *pfjets_mc_p4_branch;
  bool     pfjets_mc_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > photons_mc_motherp4_;
  TBranch *photons_mc_motherp4_branch;
  bool     photons_mc_motherp4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > photons_mc_p4_;
  TBranch *photons_mc_p4_branch;
  bool     photons_mc_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_mc_patMatch_p4_;
  TBranch *els_mc_patMatch_p4_branch;
  bool     els_mc_patMatch_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_p4_;
  TBranch *els_p4_branch;
  bool     els_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_p4In_;
  TBranch *els_p4In_branch;
  bool     els_p4In_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_p4Out_;
  TBranch *els_p4Out_branch;
  bool     els_p4Out_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_trk_p4_;
  TBranch *els_trk_p4_branch;
  bool     els_trk_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_trk_vertex_p4_;
  TBranch *els_trk_vertex_p4_branch;
  bool     els_trk_vertex_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > els_vertex_p4_;
  TBranch *els_vertex_p4_branch;
  bool     els_vertex_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > genjets_p4NoMuNoNu_;
  TBranch *genjets_p4NoMuNoNu_branch;
  bool     genjets_p4NoMuNoNu_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > genps_p4_;
  TBranch *genps_p4_branch;
  bool     genps_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > hyp_ll_p4_;
  TBranch *hyp_ll_p4_branch;
  bool     hyp_ll_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > hyp_lt_p4_;
  TBranch *hyp_lt_p4_branch;
  bool     hyp_lt_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > hyp_p4_;
  TBranch *hyp_p4_branch;
  bool     hyp_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > isotracks_p4_;
  TBranch *isotracks_p4_branch;
  bool     isotracks_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_bfit_p4_;
  TBranch *mus_bfit_p4_branch;
  bool     mus_bfit_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_gfit_p4_;
  TBranch *mus_gfit_p4_branch;
  bool     mus_gfit_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_mc_patMatch_p4_;
  TBranch *mus_mc_patMatch_p4_branch;
  bool     mus_mc_patMatch_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_p4_;
  TBranch *mus_p4_branch;
  bool     mus_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_pfp4_;
  TBranch *mus_pfp4_branch;
  bool     mus_pfp4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > mus_trk_p4_;
  TBranch *mus_trk_p4_branch;
  bool     mus_trk_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfcands_p4_;
  TBranch *pfcands_p4_branch;
  bool     pfcands_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfjets_p4_;
  TBranch *pfjets_p4_branch;
  bool     pfjets_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfjets_puppi_p4_;
  TBranch *pfjets_puppi_p4_branch;
  bool     pfjets_puppi_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > taus_pf_p4_;
  TBranch *taus_pf_p4_branch;
  bool     taus_pf_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > photons_p4_;
  TBranch *photons_p4_branch;
  bool     photons_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > svs_p4_;
  TBranch *svs_p4_branch;
  bool     svs_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > svs_position_;
  TBranch *svs_position_branch;
  bool     svs_position_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > ak8jets_p4_;
  TBranch *ak8jets_p4_branch;
  bool     ak8jets_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > ak8jets_softdropPuppiSubjet1_;
  TBranch *ak8jets_softdropPuppiSubjet1_branch;
  bool     ak8jets_softdropPuppiSubjet1_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > ak8jets_softdropPuppiSubjet2_;
  TBranch *ak8jets_softdropPuppiSubjet2_branch;
  bool     ak8jets_softdropPuppiSubjet2_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > vtxs_position_;
  TBranch *vtxs_position_branch;
  bool     vtxs_position_isLoaded;
  vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > genps_lepdaughter_p4_;
  TBranch *genps_lepdaughter_p4_branch;
  bool     genps_lepdaughter_p4_isLoaded;
  vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > pfjets_pfcandmup4_;
  TBranch *pfjets_pfcandmup4_branch;
  bool     pfjets_pfcandmup4_isLoaded;
  vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > pfjets_puppi_pfcandmup4_;
  TBranch *pfjets_puppi_pfcandmup4_branch;
  bool     pfjets_puppi_pfcandmup4_isLoaded;
  vector<float> els_mc3dr_;
  TBranch *els_mc3dr_branch;
  bool     els_mc3dr_isLoaded;
  vector<float> els_mcdr_;
  TBranch *els_mcdr_branch;
  bool     els_mcdr_isLoaded;
  vector<float> mus_mc3dr_;
  TBranch *mus_mc3dr_branch;
  bool     mus_mc3dr_isLoaded;
  vector<float> mus_mcdr_;
  TBranch *mus_mcdr_branch;
  bool     mus_mcdr_isLoaded;
  vector<float> pfjets_mc3dr_;
  TBranch *pfjets_mc3dr_branch;
  bool     pfjets_mc3dr_isLoaded;
  vector<float> pfjets_mcdr_;
  TBranch *pfjets_mcdr_branch;
  bool     pfjets_mcdr_isLoaded;
  vector<float> photons_mc3dr_;
  TBranch *photons_mc3dr_branch;
  bool     photons_mc3dr_isLoaded;
  vector<float> photons_mcdr_;
  TBranch *photons_mcdr_branch;
  bool     photons_mcdr_isLoaded;
  vector<float> els_VIDNonTrigMvaValue_;
  TBranch *els_VIDNonTrigMvaValue_branch;
  bool     els_VIDNonTrigMvaValue_isLoaded;
  vector<float> els_VIDSpring16GPMvaValue_;
  TBranch *els_VIDSpring16GPMvaValue_branch;
  bool     els_VIDSpring16GPMvaValue_isLoaded;
  vector<float> els_VIDSpring16HZZMvaValue_;
  TBranch *els_VIDSpring16HZZMvaValue_branch;
  bool     els_VIDSpring16HZZMvaValue_isLoaded;
  vector<float> els_VIDTrigMvaValue_;
  TBranch *els_VIDTrigMvaValue_branch;
  bool     els_VIDTrigMvaValue_isLoaded;
  vector<float> els_chi2_;
  TBranch *els_chi2_branch;
  bool     els_chi2_isLoaded;
  vector<float> els_ckf_chi2_;
  TBranch *els_ckf_chi2_branch;
  bool     els_ckf_chi2_isLoaded;
  vector<float> els_ckf_ndof_;
  TBranch *els_ckf_ndof_branch;
  bool     els_ckf_ndof_isLoaded;
  vector<float> els_conv_vtx_prob_;
  TBranch *els_conv_vtx_prob_branch;
  bool     els_conv_vtx_prob_isLoaded;
  vector<float> els_d0Err_;
  TBranch *els_d0Err_branch;
  bool     els_d0Err_isLoaded;
  vector<float> els_dEtaIn_;
  TBranch *els_dEtaIn_branch;
  bool     els_dEtaIn_isLoaded;
  vector<float> els_dEtaOut_;
  TBranch *els_dEtaOut_branch;
  bool     els_dEtaOut_isLoaded;
  vector<float> els_dPhiIn_;
  TBranch *els_dPhiIn_branch;
  bool     els_dPhiIn_isLoaded;
  vector<float> els_dPhiOut_;
  TBranch *els_dPhiOut_branch;
  bool     els_dPhiOut_isLoaded;
  vector<float> els_dxyPV_;
  TBranch *els_dxyPV_branch;
  bool     els_dxyPV_isLoaded;
  vector<float> els_dzPV_;
  TBranch *els_dzPV_branch;
  bool     els_dzPV_isLoaded;
  vector<float> els_e1x5_full5x5_;
  TBranch *els_e1x5_full5x5_branch;
  bool     els_e1x5_full5x5_isLoaded;
  vector<float> els_e2x5Max_full5x5_;
  TBranch *els_e2x5Max_full5x5_branch;
  bool     els_e2x5Max_full5x5_isLoaded;
  vector<float> els_e5x5_full5x5_;
  TBranch *els_e5x5_full5x5_branch;
  bool     els_e5x5_full5x5_isLoaded;
  vector<float> els_eOverPIn_;
  TBranch *els_eOverPIn_branch;
  bool     els_eOverPIn_isLoaded;
  vector<float> els_eOverPOut_;
  TBranch *els_eOverPOut_branch;
  bool     els_eOverPOut_isLoaded;
  vector<float> els_eSC_;
  TBranch *els_eSC_branch;
  bool     els_eSC_isLoaded;
  vector<float> els_eSCPresh_;
  TBranch *els_eSCPresh_branch;
  bool     els_eSCPresh_isLoaded;
  vector<float> els_eSCRaw_;
  TBranch *els_eSCRaw_branch;
  bool     els_eSCRaw_isLoaded;
  vector<float> els_eSeed_;
  TBranch *els_eSeed_branch;
  bool     els_eSeed_isLoaded;
  vector<float> els_ecalEnergy_;
  TBranch *els_ecalEnergy_branch;
  bool     els_ecalEnergy_isLoaded;
  vector<float> els_ecalEnergyError_;
  TBranch *els_ecalEnergyError_branch;
  bool     els_ecalEnergyError_isLoaded;
  vector<float> els_ecalIso_;
  TBranch *els_ecalIso_branch;
  bool     els_ecalIso_isLoaded;
  vector<float> els_ecalIso04_;
  TBranch *els_ecalIso04_branch;
  bool     els_ecalIso04_isLoaded;
  vector<float> els_ecalPFClusterIso_;
  TBranch *els_ecalPFClusterIso_branch;
  bool     els_ecalPFClusterIso_isLoaded;
  vector<float> els_etaSC_;
  TBranch *els_etaSC_branch;
  bool     els_etaSC_isLoaded;
  vector<float> els_etaSCwidth_;
  TBranch *els_etaSCwidth_branch;
  bool     els_etaSCwidth_isLoaded;
  vector<float> els_fbrem_;
  TBranch *els_fbrem_branch;
  bool     els_fbrem_isLoaded;
  vector<float> els_full5x5_hOverE_;
  TBranch *els_full5x5_hOverE_branch;
  bool     els_full5x5_hOverE_isLoaded;
  vector<float> els_hOverE_;
  TBranch *els_hOverE_branch;
  bool     els_hOverE_isLoaded;
  vector<float> els_hcalDepth1TowerSumEt_;
  TBranch *els_hcalDepth1TowerSumEt_branch;
  bool     els_hcalDepth1TowerSumEt_isLoaded;
  vector<float> els_hcalIso_;
  TBranch *els_hcalIso_branch;
  bool     els_hcalIso_isLoaded;
  vector<float> els_hcalIso04_;
  TBranch *els_hcalIso04_branch;
  bool     els_hcalIso04_isLoaded;
  vector<float> els_hcalPFClusterIso_;
  TBranch *els_hcalPFClusterIso_branch;
  bool     els_hcalPFClusterIso_isLoaded;
  vector<float> els_ip2d_;
  TBranch *els_ip2d_branch;
  bool     els_ip2d_isLoaded;
  vector<float> els_ip2derr_;
  TBranch *els_ip2derr_branch;
  bool     els_ip2derr_isLoaded;
  vector<float> els_ip3d_;
  TBranch *els_ip3d_branch;
  bool     els_ip3d_isLoaded;
  vector<float> els_ip3derr_;
  TBranch *els_ip3derr_branch;
  bool     els_ip3derr_isLoaded;
  vector<float> els_mc_patMatch_dr_;
  TBranch *els_mc_patMatch_dr_branch;
  bool     els_mc_patMatch_dr_isLoaded;
  vector<float> els_miniIso_ch_;
  TBranch *els_miniIso_ch_branch;
  bool     els_miniIso_ch_isLoaded;
  vector<float> els_miniIso_db_;
  TBranch *els_miniIso_db_branch;
  bool     els_miniIso_db_isLoaded;
  vector<float> els_miniIso_em_;
  TBranch *els_miniIso_em_branch;
  bool     els_miniIso_em_isLoaded;
  vector<float> els_miniIso_nh_;
  TBranch *els_miniIso_nh_branch;
  bool     els_miniIso_nh_isLoaded;
  vector<float> els_miniIso_uncor_;
  TBranch *els_miniIso_uncor_branch;
  bool     els_miniIso_uncor_isLoaded;
  vector<float> els_ndof_;
  TBranch *els_ndof_branch;
  bool     els_ndof_isLoaded;
  vector<float> els_pfChargedHadronIso_;
  TBranch *els_pfChargedHadronIso_branch;
  bool     els_pfChargedHadronIso_isLoaded;
  vector<float> els_pfNeutralHadronIso_;
  TBranch *els_pfNeutralHadronIso_branch;
  bool     els_pfNeutralHadronIso_isLoaded;
  vector<float> els_pfPUIso_;
  TBranch *els_pfPUIso_branch;
  bool     els_pfPUIso_isLoaded;
  vector<float> els_pfPhotonIso_;
  TBranch *els_pfPhotonIso_branch;
  bool     els_pfPhotonIso_isLoaded;
  vector<float> els_phiSC_;
  TBranch *els_phiSC_branch;
  bool     els_phiSC_isLoaded;
  vector<float> els_phiSCwidth_;
  TBranch *els_phiSCwidth_branch;
  bool     els_phiSCwidth_isLoaded;
  vector<float> els_ptErr_;
  TBranch *els_ptErr_branch;
  bool     els_ptErr_isLoaded;
  vector<float> els_ptErrGsf_;
  TBranch *els_ptErrGsf_branch;
  bool     els_ptErrGsf_isLoaded;
  vector<float> els_r9_;
  TBranch *els_r9_branch;
  bool     els_r9_isLoaded;
  vector<float> els_r9_full5x5_;
  TBranch *els_r9_full5x5_branch;
  bool     els_r9_full5x5_isLoaded;
  vector<float> els_scSeedEta_;
  TBranch *els_scSeedEta_branch;
  bool     els_scSeedEta_isLoaded;
  vector<float> els_sigmaEtaEta_full5x5_;
  TBranch *els_sigmaEtaEta_full5x5_branch;
  bool     els_sigmaEtaEta_full5x5_isLoaded;
  vector<float> els_sigmaIEtaIEta_;
  TBranch *els_sigmaIEtaIEta_branch;
  bool     els_sigmaIEtaIEta_isLoaded;
  vector<float> els_sigmaIEtaIEta_full5x5_;
  TBranch *els_sigmaIEtaIEta_full5x5_branch;
  bool     els_sigmaIEtaIEta_full5x5_isLoaded;
  vector<float> els_sigmaIPhiIPhi_;
  TBranch *els_sigmaIPhiIPhi_branch;
  bool     els_sigmaIPhiIPhi_isLoaded;
  vector<float> els_sigmaIPhiIPhi_full5x5_;
  TBranch *els_sigmaIPhiIPhi_full5x5_branch;
  bool     els_sigmaIPhiIPhi_full5x5_isLoaded;
  vector<float> els_tkIso_;
  TBranch *els_tkIso_branch;
  bool     els_tkIso_isLoaded;
  vector<float> els_tkIso04_;
  TBranch *els_tkIso04_branch;
  bool     els_tkIso04_isLoaded;
  vector<float> els_trackMomentumError_;
  TBranch *els_trackMomentumError_branch;
  bool     els_trackMomentumError_isLoaded;
  vector<float> els_trkdr_;
  TBranch *els_trkdr_branch;
  bool     els_trkdr_isLoaded;
  vector<float> els_trkshFrac_;
  TBranch *els_trkshFrac_branch;
  bool     els_trkshFrac_isLoaded;
  vector<float> els_z0Err_;
  TBranch *els_z0Err_branch;
  bool     els_z0Err_isLoaded;
  vector<float> genps_charge_;
  TBranch *genps_charge_branch;
  bool     genps_charge_isLoaded;
  vector<float> genps_iso_;
  TBranch *genps_iso_branch;
  bool     genps_iso_isLoaded;
  vector<float> genweights_;
  TBranch *genweights_branch;
  bool     genweights_isLoaded;
  vector<float> isotracks_dEdxPixel_;
  TBranch *isotracks_dEdxPixel_branch;
  bool     isotracks_dEdxPixel_isLoaded;
  vector<float> isotracks_dEdxStrip_;
  TBranch *isotracks_dEdxStrip_branch;
  bool     isotracks_dEdxStrip_isLoaded;
  vector<float> isotracks_deltaEta_;
  TBranch *isotracks_deltaEta_branch;
  bool     isotracks_deltaEta_isLoaded;
  vector<float> isotracks_deltaPhi_;
  TBranch *isotracks_deltaPhi_branch;
  bool     isotracks_deltaPhi_isLoaded;
  vector<float> isotracks_dxy_;
  TBranch *isotracks_dxy_branch;
  bool     isotracks_dxy_isLoaded;
  vector<float> isotracks_dxyError_;
  TBranch *isotracks_dxyError_branch;
  bool     isotracks_dxyError_isLoaded;
  vector<float> isotracks_dz_;
  TBranch *isotracks_dz_branch;
  bool     isotracks_dz_isLoaded;
  vector<float> isotracks_dzError_;
  TBranch *isotracks_dzError_branch;
  bool     isotracks_dzError_isLoaded;
  vector<float> isotracks_matchedCaloJetEmEnergy_;
  TBranch *isotracks_matchedCaloJetEmEnergy_branch;
  bool     isotracks_matchedCaloJetEmEnergy_isLoaded;
  vector<float> isotracks_matchedCaloJetHadEnergy_;
  TBranch *isotracks_matchedCaloJetHadEnergy_branch;
  bool     isotracks_matchedCaloJetHadEnergy_isLoaded;
  vector<float> isotracks_miniIso_ch_;
  TBranch *isotracks_miniIso_ch_branch;
  bool     isotracks_miniIso_ch_isLoaded;
  vector<float> isotracks_miniIso_db_;
  TBranch *isotracks_miniIso_db_branch;
  bool     isotracks_miniIso_db_isLoaded;
  vector<float> isotracks_miniIso_em_;
  TBranch *isotracks_miniIso_em_branch;
  bool     isotracks_miniIso_em_isLoaded;
  vector<float> isotracks_miniIso_nh_;
  TBranch *isotracks_miniIso_nh_branch;
  bool     isotracks_miniIso_nh_isLoaded;
  vector<float> isotracks_pfIso_ch_;
  TBranch *isotracks_pfIso_ch_branch;
  bool     isotracks_pfIso_ch_isLoaded;
  vector<float> isotracks_pfIso_db_;
  TBranch *isotracks_pfIso_db_branch;
  bool     isotracks_pfIso_db_isLoaded;
  vector<float> isotracks_pfIso_em_;
  TBranch *isotracks_pfIso_em_branch;
  bool     isotracks_pfIso_em_isLoaded;
  vector<float> isotracks_pfIso_nh_;
  TBranch *isotracks_pfIso_nh_branch;
  bool     isotracks_pfIso_nh_isLoaded;
  vector<float> mus_bfit_ptErr_;
  TBranch *mus_bfit_ptErr_branch;
  bool     mus_bfit_ptErr_isLoaded;
  vector<float> mus_caloCompatibility_;
  TBranch *mus_caloCompatibility_branch;
  bool     mus_caloCompatibility_isLoaded;
  vector<float> mus_chi2LocalMomentum_;
  TBranch *mus_chi2LocalMomentum_branch;
  bool     mus_chi2LocalMomentum_isLoaded;
  vector<float> mus_chi2LocalPosition_;
  TBranch *mus_chi2LocalPosition_branch;
  bool     mus_chi2LocalPosition_isLoaded;
  vector<float> mus_d0Err_;
  TBranch *mus_d0Err_branch;
  bool     mus_d0Err_isLoaded;
  vector<float> mus_dxyPV_;
  TBranch *mus_dxyPV_branch;
  bool     mus_dxyPV_isLoaded;
  vector<float> mus_dzPV_;
  TBranch *mus_dzPV_branch;
  bool     mus_dzPV_isLoaded;
  vector<float> mus_ecal_time_;
  TBranch *mus_ecal_time_branch;
  bool     mus_ecal_time_isLoaded;
  vector<float> mus_gfit_chi2_;
  TBranch *mus_gfit_chi2_branch;
  bool     mus_gfit_chi2_isLoaded;
  vector<float> mus_gfit_ptErr_;
  TBranch *mus_gfit_ptErr_branch;
  bool     mus_gfit_ptErr_isLoaded;
  vector<float> mus_hcal_time_;
  TBranch *mus_hcal_time_branch;
  bool     mus_hcal_time_isLoaded;
  vector<float> mus_ip2d_;
  TBranch *mus_ip2d_branch;
  bool     mus_ip2d_isLoaded;
  vector<float> mus_ip2derr_;
  TBranch *mus_ip2derr_branch;
  bool     mus_ip2derr_isLoaded;
  vector<float> mus_ip3d_;
  TBranch *mus_ip3d_branch;
  bool     mus_ip3d_isLoaded;
  vector<float> mus_ip3derr_;
  TBranch *mus_ip3derr_branch;
  bool     mus_ip3derr_isLoaded;
  vector<float> mus_iso03_emEt_;
  TBranch *mus_iso03_emEt_branch;
  bool     mus_iso03_emEt_isLoaded;
  vector<float> mus_iso03_hadEt_;
  TBranch *mus_iso03_hadEt_branch;
  bool     mus_iso03_hadEt_isLoaded;
  vector<float> mus_iso03_sumPt_;
  TBranch *mus_iso03_sumPt_branch;
  bool     mus_iso03_sumPt_isLoaded;
  vector<float> mus_isoR03_pf_ChargedHadronPt_;
  TBranch *mus_isoR03_pf_ChargedHadronPt_branch;
  bool     mus_isoR03_pf_ChargedHadronPt_isLoaded;
  vector<float> mus_isoR03_pf_ChargedParticlePt_;
  TBranch *mus_isoR03_pf_ChargedParticlePt_branch;
  bool     mus_isoR03_pf_ChargedParticlePt_isLoaded;
  vector<float> mus_isoR03_pf_NeutralHadronEt_;
  TBranch *mus_isoR03_pf_NeutralHadronEt_branch;
  bool     mus_isoR03_pf_NeutralHadronEt_isLoaded;
  vector<float> mus_isoR03_pf_NeutralHadronEtHighThreshold_;
  TBranch *mus_isoR03_pf_NeutralHadronEtHighThreshold_branch;
  bool     mus_isoR03_pf_NeutralHadronEtHighThreshold_isLoaded;
  vector<float> mus_isoR03_pf_PUPt_;
  TBranch *mus_isoR03_pf_PUPt_branch;
  bool     mus_isoR03_pf_PUPt_isLoaded;
  vector<float> mus_isoR03_pf_PhotonEt_;
  TBranch *mus_isoR03_pf_PhotonEt_branch;
  bool     mus_isoR03_pf_PhotonEt_isLoaded;
  vector<float> mus_isoR03_pf_PhotonEtHighThreshold_;
  TBranch *mus_isoR03_pf_PhotonEtHighThreshold_branch;
  bool     mus_isoR03_pf_PhotonEtHighThreshold_isLoaded;
  vector<float> mus_isoR04_pf_ChargedHadronPt_;
  TBranch *mus_isoR04_pf_ChargedHadronPt_branch;
  bool     mus_isoR04_pf_ChargedHadronPt_isLoaded;
  vector<float> mus_isoR04_pf_ChargedParticlePt_;
  TBranch *mus_isoR04_pf_ChargedParticlePt_branch;
  bool     mus_isoR04_pf_ChargedParticlePt_isLoaded;
  vector<float> mus_isoR04_pf_NeutralHadronEt_;
  TBranch *mus_isoR04_pf_NeutralHadronEt_branch;
  bool     mus_isoR04_pf_NeutralHadronEt_isLoaded;
  vector<float> mus_isoR04_pf_NeutralHadronEtHighThreshold_;
  TBranch *mus_isoR04_pf_NeutralHadronEtHighThreshold_branch;
  bool     mus_isoR04_pf_NeutralHadronEtHighThreshold_isLoaded;
  vector<float> mus_isoR04_pf_PUPt_;
  TBranch *mus_isoR04_pf_PUPt_branch;
  bool     mus_isoR04_pf_PUPt_isLoaded;
  vector<float> mus_isoR04_pf_PhotonEt_;
  TBranch *mus_isoR04_pf_PhotonEt_branch;
  bool     mus_isoR04_pf_PhotonEt_isLoaded;
  vector<float> mus_isoR04_pf_PhotonEtHighThreshold_;
  TBranch *mus_isoR04_pf_PhotonEtHighThreshold_branch;
  bool     mus_isoR04_pf_PhotonEtHighThreshold_isLoaded;
  vector<float> mus_iso_ecalvetoDep_;
  TBranch *mus_iso_ecalvetoDep_branch;
  bool     mus_iso_ecalvetoDep_isLoaded;
  vector<float> mus_iso_hcalvetoDep_;
  TBranch *mus_iso_hcalvetoDep_branch;
  bool     mus_iso_hcalvetoDep_isLoaded;
  vector<float> mus_iso_hovetoDep_;
  TBranch *mus_iso_hovetoDep_branch;
  bool     mus_iso_hovetoDep_isLoaded;
  vector<float> mus_iso_trckvetoDep_;
  TBranch *mus_iso_trckvetoDep_branch;
  bool     mus_iso_trckvetoDep_isLoaded;
  vector<float> mus_mc_patMatch_dr_;
  TBranch *mus_mc_patMatch_dr_branch;
  bool     mus_mc_patMatch_dr_isLoaded;
  vector<float> mus_miniIso_ch_;
  TBranch *mus_miniIso_ch_branch;
  bool     mus_miniIso_ch_isLoaded;
  vector<float> mus_miniIso_db_;
  TBranch *mus_miniIso_db_branch;
  bool     mus_miniIso_db_isLoaded;
  vector<float> mus_miniIso_em_;
  TBranch *mus_miniIso_em_branch;
  bool     mus_miniIso_em_isLoaded;
  vector<float> mus_miniIso_nh_;
  TBranch *mus_miniIso_nh_branch;
  bool     mus_miniIso_nh_isLoaded;
  vector<float> mus_miniIso_uncor_;
  TBranch *mus_miniIso_uncor_branch;
  bool     mus_miniIso_uncor_isLoaded;
  vector<float> mus_ptErr_;
  TBranch *mus_ptErr_branch;
  bool     mus_ptErr_isLoaded;
  vector<float> mus_segmCompatibility_;
  TBranch *mus_segmCompatibility_branch;
  bool     mus_segmCompatibility_isLoaded;
  vector<float> mus_trkKink_;
  TBranch *mus_trkKink_branch;
  bool     mus_trkKink_isLoaded;
  vector<float> mus_z0Err_;
  TBranch *mus_z0Err_branch;
  bool     mus_z0Err_isLoaded;
  vector<float> pfcands_dxy_;
  TBranch *pfcands_dxy_branch;
  bool     pfcands_dxy_isLoaded;
  vector<float> pfcands_dxyError_;
  TBranch *pfcands_dxyError_branch;
  bool     pfcands_dxyError_isLoaded;
  vector<float> pfcands_dz_;
  TBranch *pfcands_dz_branch;
  bool     pfcands_dz_isLoaded;
  vector<float> pfcands_dzAssociatedPV_;
  TBranch *pfcands_dzAssociatedPV_branch;
  bool     pfcands_dzAssociatedPV_isLoaded;
  vector<float> pfcands_dzError_;
  TBranch *pfcands_dzError_branch;
  bool     pfcands_dzError_isLoaded;
  vector<float> pfcands_mass_;
  TBranch *pfcands_mass_branch;
  bool     pfcands_mass_isLoaded;
  vector<float> pfcands_miniTrackIso_;
  TBranch *pfcands_miniTrackIso_branch;
  bool     pfcands_miniTrackIso_isLoaded;
  vector<float> pfcands_puppiWeight_;
  TBranch *pfcands_puppiWeight_branch;
  bool     pfcands_puppiWeight_isLoaded;
  vector<float> pfcands_puppiWeightNoLep_;
  TBranch *pfcands_puppiWeightNoLep_branch;
  bool     pfcands_puppiWeightNoLep_isLoaded;
  vector<float> pfcands_trackIso_;
  TBranch *pfcands_trackIso_branch;
  bool     pfcands_trackIso_isLoaded;
  vector<float> pfjets_area_;
  TBranch *pfjets_area_branch;
  bool     pfjets_area_isLoaded;
  vector<float> pfjets_axis1_;
  TBranch *pfjets_axis1_branch;
  bool     pfjets_axis1_isLoaded;
  vector<float> pfjets_chargedEmE_;
  TBranch *pfjets_chargedEmE_branch;
  bool     pfjets_chargedEmE_isLoaded;
  vector<float> pfjets_chargedHadronE_;
  TBranch *pfjets_chargedHadronE_branch;
  bool     pfjets_chargedHadronE_isLoaded;
  vector<float> pfjets_electronE_;
  TBranch *pfjets_electronE_branch;
  bool     pfjets_electronE_isLoaded;
  vector<float> pfjets_hfEmE_;
  TBranch *pfjets_hfEmE_branch;
  bool     pfjets_hfEmE_isLoaded;
  vector<float> pfjets_hfHadronE_;
  TBranch *pfjets_hfHadronE_branch;
  bool     pfjets_hfHadronE_isLoaded;
  vector<float> pfjets_muonE_;
  TBranch *pfjets_muonE_branch;
  bool     pfjets_muonE_isLoaded;
  vector<float> pfjets_neutralEmE_;
  TBranch *pfjets_neutralEmE_branch;
  bool     pfjets_neutralEmE_isLoaded;
  vector<float> pfjets_neutralHadronE_;
  TBranch *pfjets_neutralHadronE_branch;
  bool     pfjets_neutralHadronE_isLoaded;
  vector<float> pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag_;
  TBranch *pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag_branch;
  bool     pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag_isLoaded;
  vector<float> pfjets_pfDeepCSVJetTagsprobbPlusprobbb_;
  TBranch *pfjets_pfDeepCSVJetTagsprobbPlusprobbb_branch;
  bool     pfjets_pfDeepCSVJetTagsprobbPlusprobbb_isLoaded;
  vector<float> pfjets_photonE_;
  TBranch *pfjets_photonE_branch;
  bool     pfjets_photonE_isLoaded;
  vector<float> pfjets_pileupJetId_;
  TBranch *pfjets_pileupJetId_branch;
  bool     pfjets_pileupJetId_isLoaded;
  vector<float> pfjets_ptDistribution_;
  TBranch *pfjets_ptDistribution_branch;
  bool     pfjets_ptDistribution_isLoaded;
  vector<float> pfjets_undoJEC_;
  TBranch *pfjets_undoJEC_branch;
  bool     pfjets_undoJEC_isLoaded;
  vector<float> pfjets_puppi_area_;
  TBranch *pfjets_puppi_area_branch;
  bool     pfjets_puppi_area_isLoaded;
  vector<float> pfjets_puppi_axis1_;
  TBranch *pfjets_puppi_axis1_branch;
  bool     pfjets_puppi_axis1_isLoaded;
  vector<float> pfjets_puppi_chargedEmE_;
  TBranch *pfjets_puppi_chargedEmE_branch;
  bool     pfjets_puppi_chargedEmE_isLoaded;
  vector<float> pfjets_puppi_chargedHadronE_;
  TBranch *pfjets_puppi_chargedHadronE_branch;
  bool     pfjets_puppi_chargedHadronE_isLoaded;
  vector<float> pfjets_puppi_electronE_;
  TBranch *pfjets_puppi_electronE_branch;
  bool     pfjets_puppi_electronE_isLoaded;
  vector<float> pfjets_puppi_hfEmE_;
  TBranch *pfjets_puppi_hfEmE_branch;
  bool     pfjets_puppi_hfEmE_isLoaded;
  vector<float> pfjets_puppi_hfHadronE_;
  TBranch *pfjets_puppi_hfHadronE_branch;
  bool     pfjets_puppi_hfHadronE_isLoaded;
  vector<float> pfjets_puppi_muonE_;
  TBranch *pfjets_puppi_muonE_branch;
  bool     pfjets_puppi_muonE_isLoaded;
  vector<float> pfjets_puppi_neutralEmE_;
  TBranch *pfjets_puppi_neutralEmE_branch;
  bool     pfjets_puppi_neutralEmE_isLoaded;
  vector<float> pfjets_puppi_neutralHadronE_;
  TBranch *pfjets_puppi_neutralHadronE_branch;
  bool     pfjets_puppi_neutralHadronE_isLoaded;
  vector<float> pfjets_puppi_pfCombinedInclusiveSecondaryVertexV2BJetTag_;
  TBranch *pfjets_puppi_pfCombinedInclusiveSecondaryVertexV2BJetTag_branch;
  bool     pfjets_puppi_pfCombinedInclusiveSecondaryVertexV2BJetTag_isLoaded;
  vector<float> pfjets_puppi_pfDeepCSVJetTagsprobbPlusprobbb_;
  TBranch *pfjets_puppi_pfDeepCSVJetTagsprobbPlusprobbb_branch;
  bool     pfjets_puppi_pfDeepCSVJetTagsprobbPlusprobbb_isLoaded;
  vector<float> pfjets_puppi_photonE_;
  TBranch *pfjets_puppi_photonE_branch;
  bool     pfjets_puppi_photonE_isLoaded;
  vector<float> pfjets_puppi_pileupJetId_;
  TBranch *pfjets_puppi_pileupJetId_branch;
  bool     pfjets_puppi_pileupJetId_isLoaded;
  vector<float> pfjets_puppi_ptDistribution_;
  TBranch *pfjets_puppi_ptDistribution_branch;
  bool     pfjets_puppi_ptDistribution_isLoaded;
  vector<float> pfjets_puppi_undoJEC_;
  TBranch *pfjets_puppi_undoJEC_branch;
  bool     pfjets_puppi_undoJEC_isLoaded;
  vector<float> photons_ecalPFClusterIso_;
  TBranch *photons_ecalPFClusterIso_branch;
  bool     photons_ecalPFClusterIso_isLoaded;
  vector<float> photons_full5x5_hOverE_;
  TBranch *photons_full5x5_hOverE_branch;
  bool     photons_full5x5_hOverE_isLoaded;
  vector<float> photons_full5x5_hOverEtowBC_;
  TBranch *photons_full5x5_hOverEtowBC_branch;
  bool     photons_full5x5_hOverEtowBC_isLoaded;
  vector<float> photons_full5x5_r9_;
  TBranch *photons_full5x5_r9_branch;
  bool     photons_full5x5_r9_isLoaded;
  vector<float> photons_full5x5_sigmaIEtaIEta_;
  TBranch *photons_full5x5_sigmaIEtaIEta_branch;
  bool     photons_full5x5_sigmaIEtaIEta_isLoaded;
  vector<float> photons_hOverE_;
  TBranch *photons_hOverE_branch;
  bool     photons_hOverE_isLoaded;
  vector<float> photons_hOverEtowBC_;
  TBranch *photons_hOverEtowBC_branch;
  bool     photons_hOverEtowBC_isLoaded;
  vector<float> photons_hcalPFClusterIso_;
  TBranch *photons_hcalPFClusterIso_branch;
  bool     photons_hcalPFClusterIso_isLoaded;
  vector<float> photons_ntkIsoHollow03_;
  TBranch *photons_ntkIsoHollow03_branch;
  bool     photons_ntkIsoHollow03_isLoaded;
  vector<float> photons_recoChargedHadronIso_;
  TBranch *photons_recoChargedHadronIso_branch;
  bool     photons_recoChargedHadronIso_isLoaded;
  vector<float> photons_recoNeutralHadronIso_;
  TBranch *photons_recoNeutralHadronIso_branch;
  bool     photons_recoNeutralHadronIso_isLoaded;
  vector<float> photons_recoPhotonIso_;
  TBranch *photons_recoPhotonIso_branch;
  bool     photons_recoPhotonIso_isLoaded;
  vector<float> photons_sigmaIEtaIEta_;
  TBranch *photons_sigmaIEtaIEta_branch;
  bool     photons_sigmaIEtaIEta_isLoaded;
  vector<float> photons_tkIsoHollow03_;
  TBranch *photons_tkIsoHollow03_branch;
  bool     photons_tkIsoHollow03_isLoaded;
  vector<float> puInfo_trueNumInteractions_;
  TBranch *puInfo_trueNumInteractions_branch;
  bool     puInfo_trueNumInteractions_isLoaded;
  vector<float> svs_anglePV_;
  TBranch *svs_anglePV_branch;
  bool     svs_anglePV_isLoaded;
  vector<float> svs_chi2_;
  TBranch *svs_chi2_branch;
  bool     svs_chi2_isLoaded;
  vector<float> svs_dist3Dsig_;
  TBranch *svs_dist3Dsig_branch;
  bool     svs_dist3Dsig_isLoaded;
  vector<float> svs_dist3Dval_;
  TBranch *svs_dist3Dval_branch;
  bool     svs_dist3Dval_isLoaded;
  vector<float> svs_distXYsig_;
  TBranch *svs_distXYsig_branch;
  bool     svs_distXYsig_isLoaded;
  vector<float> svs_distXYval_;
  TBranch *svs_distXYval_branch;
  bool     svs_distXYval_isLoaded;
  vector<float> svs_ndof_;
  TBranch *svs_ndof_branch;
  bool     svs_ndof_isLoaded;
  vector<float> svs_prob_;
  TBranch *svs_prob_branch;
  bool     svs_prob_isLoaded;
  vector<float> svs_xError_;
  TBranch *svs_xError_branch;
  bool     svs_xError_isLoaded;
  vector<float> svs_yError_;
  TBranch *svs_yError_branch;
  bool     svs_yError_isLoaded;
  vector<float> svs_zError_;
  TBranch *svs_zError_branch;
  bool     svs_zError_isLoaded;
  vector<float> ak8jets_area_;
  TBranch *ak8jets_area_branch;
  bool     ak8jets_area_isLoaded;
  vector<float> ak8jets_mass_;
  TBranch *ak8jets_mass_branch;
  bool     ak8jets_mass_isLoaded;
  vector<float> ak8jets_nJettinessTau1_;
  TBranch *ak8jets_nJettinessTau1_branch;
  bool     ak8jets_nJettinessTau1_isLoaded;
  vector<float> ak8jets_nJettinessTau2_;
  TBranch *ak8jets_nJettinessTau2_branch;
  bool     ak8jets_nJettinessTau2_isLoaded;
  vector<float> ak8jets_nJettinessTau3_;
  TBranch *ak8jets_nJettinessTau3_branch;
  bool     ak8jets_nJettinessTau3_isLoaded;
  vector<float> ak8jets_prunedMass_;
  TBranch *ak8jets_prunedMass_branch;
  bool     ak8jets_prunedMass_isLoaded;
  vector<float> ak8jets_puppi_eta_;
  TBranch *ak8jets_puppi_eta_branch;
  bool     ak8jets_puppi_eta_isLoaded;
  vector<float> ak8jets_puppi_mass_;
  TBranch *ak8jets_puppi_mass_branch;
  bool     ak8jets_puppi_mass_isLoaded;
  vector<float> ak8jets_puppi_nJettinessTau1_;
  TBranch *ak8jets_puppi_nJettinessTau1_branch;
  bool     ak8jets_puppi_nJettinessTau1_isLoaded;
  vector<float> ak8jets_puppi_nJettinessTau2_;
  TBranch *ak8jets_puppi_nJettinessTau2_branch;
  bool     ak8jets_puppi_nJettinessTau2_isLoaded;
  vector<float> ak8jets_puppi_nJettinessTau3_;
  TBranch *ak8jets_puppi_nJettinessTau3_branch;
  bool     ak8jets_puppi_nJettinessTau3_isLoaded;
  vector<float> ak8jets_puppi_phi_;
  TBranch *ak8jets_puppi_phi_branch;
  bool     ak8jets_puppi_phi_isLoaded;
  vector<float> ak8jets_puppi_pt_;
  TBranch *ak8jets_puppi_pt_branch;
  bool     ak8jets_puppi_pt_isLoaded;
  vector<float> ak8jets_puppi_softdropMass_;
  TBranch *ak8jets_puppi_softdropMass_branch;
  bool     ak8jets_puppi_softdropMass_isLoaded;
  vector<float> ak8jets_softdropMass_;
  TBranch *ak8jets_softdropMass_branch;
  bool     ak8jets_softdropMass_isLoaded;
  vector<float> ak8jets_undoJEC_;
  TBranch *ak8jets_undoJEC_branch;
  bool     ak8jets_undoJEC_isLoaded;
  vector<float> vtxs_ndof_;
  TBranch *vtxs_ndof_branch;
  bool     vtxs_ndof_isLoaded;
  vector<vector<float> > pfjets_bDiscriminators_;
  TBranch *pfjets_bDiscriminators_branch;
  bool     pfjets_bDiscriminators_isLoaded;
  vector<vector<float> > pfjets_puppi_bDiscriminators_;
  TBranch *pfjets_puppi_bDiscriminators_branch;
  bool     pfjets_puppi_bDiscriminators_isLoaded;
  vector<vector<float> > taus_pf_IDs_;
  TBranch *taus_pf_IDs_branch;
  bool     taus_pf_IDs_isLoaded;
  vector<vector<float> > puInfo_instLumi_;
  TBranch *puInfo_instLumi_branch;
  bool     puInfo_instLumi_isLoaded;
  int      evt_bunchCrossing_;
  TBranch *evt_bunchCrossing_branch;
  bool     evt_bunchCrossing_isLoaded;
  int      evt_experimentType_;
  TBranch *evt_experimentType_branch;
  bool     evt_experimentType_isLoaded;
  int      evt_isRealData_;
  TBranch *evt_isRealData_branch;
  bool     evt_isRealData_isLoaded;
  int      evt_orbitNumber_;
  TBranch *evt_orbitNumber_branch;
  bool     evt_orbitNumber_isLoaded;
  int      evt_storeNumber_;
  TBranch *evt_storeNumber_branch;
  bool     evt_storeNumber_isLoaded;
  int      pdfinfo_id1_;
  TBranch *pdfinfo_id1_branch;
  bool     pdfinfo_id1_isLoaded;
  int      pdfinfo_id2_;
  TBranch *pdfinfo_id2_branch;
  bool     pdfinfo_id2_isLoaded;
  vector<int> els_mc3_id_;
  TBranch *els_mc3_id_branch;
  bool     els_mc3_id_isLoaded;
  vector<int> els_mc3idx_;
  TBranch *els_mc3idx_branch;
  bool     els_mc3idx_isLoaded;
  vector<int> els_mc3_motherid_;
  TBranch *els_mc3_motherid_branch;
  bool     els_mc3_motherid_isLoaded;
  vector<int> els_mc3_motheridx_;
  TBranch *els_mc3_motheridx_branch;
  bool     els_mc3_motheridx_isLoaded;
  vector<int> els_mc_id_;
  TBranch *els_mc_id_branch;
  bool     els_mc_id_isLoaded;
  vector<int> els_mc_motherid_;
  TBranch *els_mc_motherid_branch;
  bool     els_mc_motherid_isLoaded;
  vector<int> mus_mc3_id_;
  TBranch *mus_mc3_id_branch;
  bool     mus_mc3_id_isLoaded;
  vector<int> mus_mc3idx_;
  TBranch *mus_mc3idx_branch;
  bool     mus_mc3idx_isLoaded;
  vector<int> mus_mc3_motherid_;
  TBranch *mus_mc3_motherid_branch;
  bool     mus_mc3_motherid_isLoaded;
  vector<int> mus_mc3_motheridx_;
  TBranch *mus_mc3_motheridx_branch;
  bool     mus_mc3_motheridx_isLoaded;
  vector<int> mus_mc_id_;
  TBranch *mus_mc_id_branch;
  bool     mus_mc_id_isLoaded;
  vector<int> mus_mc_motherid_;
  TBranch *mus_mc_motherid_branch;
  bool     mus_mc_motherid_isLoaded;
  vector<int> pfjets_mc3_id_;
  TBranch *pfjets_mc3_id_branch;
  bool     pfjets_mc3_id_isLoaded;
  vector<int> pfjets_mc3idx_;
  TBranch *pfjets_mc3idx_branch;
  bool     pfjets_mc3idx_isLoaded;
  vector<int> pfjets_mc_motherid_;
  TBranch *pfjets_mc_motherid_branch;
  bool     pfjets_mc_motherid_isLoaded;
  vector<int> photons_mc3_id_;
  TBranch *photons_mc3_id_branch;
  bool     photons_mc3_id_isLoaded;
  vector<int> photons_mc3idx_;
  TBranch *photons_mc3idx_branch;
  bool     photons_mc3idx_isLoaded;
  vector<int> photons_mc3_motherid_;
  TBranch *photons_mc3_motherid_branch;
  bool     photons_mc3_motherid_isLoaded;
  vector<int> photons_mc3_motheridx_;
  TBranch *photons_mc3_motheridx_branch;
  bool     photons_mc3_motheridx_isLoaded;
  vector<int> photons_mc_id_;
  TBranch *photons_mc_id_branch;
  bool     photons_mc_id_isLoaded;
  vector<int> photons_mc_motherid_;
  TBranch *photons_mc_motherid_branch;
  bool     photons_mc_motherid_isLoaded;
  vector<int> els_VIDNonTrigMvaCat_;
  TBranch *els_VIDNonTrigMvaCat_branch;
  bool     els_VIDNonTrigMvaCat_isLoaded;
  vector<int> els_VIDSpring16GPMvaCat_;
  TBranch *els_VIDSpring16GPMvaCat_branch;
  bool     els_VIDSpring16GPMvaCat_isLoaded;
  vector<int> els_VIDSpring16HZZMvaCat_;
  TBranch *els_VIDSpring16HZZMvaCat_branch;
  bool     els_VIDSpring16HZZMvaCat_isLoaded;
  vector<int> els_VIDTrigMvaCat_;
  TBranch *els_VIDTrigMvaCat_branch;
  bool     els_VIDTrigMvaCat_isLoaded;
  vector<int> els_category_;
  TBranch *els_category_branch;
  bool     els_category_isLoaded;
  vector<int> els_charge_;
  TBranch *els_charge_branch;
  bool     els_charge_isLoaded;
  vector<int> els_ckf_charge_;
  TBranch *els_ckf_charge_branch;
  bool     els_ckf_charge_isLoaded;
  vector<int> els_ckf_laywithmeas_;
  TBranch *els_ckf_laywithmeas_branch;
  bool     els_ckf_laywithmeas_isLoaded;
  vector<int> els_exp_innerlayers_;
  TBranch *els_exp_innerlayers_branch;
  bool     els_exp_innerlayers_isLoaded;
  vector<int> els_exp_outerlayers_;
  TBranch *els_exp_outerlayers_branch;
  bool     els_exp_outerlayers_isLoaded;
  vector<int> els_isEB_;
  TBranch *els_isEB_branch;
  bool     els_isEB_isLoaded;
  vector<int> els_isEcalDriven_;
  TBranch *els_isEcalDriven_branch;
  bool     els_isEcalDriven_isLoaded;
  vector<int> els_isTrackerDriven_;
  TBranch *els_isTrackerDriven_branch;
  bool     els_isTrackerDriven_isLoaded;
  vector<int> els_lostHits_;
  TBranch *els_lostHits_branch;
  bool     els_lostHits_isLoaded;
  vector<int> els_lost_pixelhits_;
  TBranch *els_lost_pixelhits_branch;
  bool     els_lost_pixelhits_isLoaded;
  vector<int> els_mc_patMatch_id_;
  TBranch *els_mc_patMatch_id_branch;
  bool     els_mc_patMatch_id_isLoaded;
  vector<int> els_nlayers_;
  TBranch *els_nlayers_branch;
  bool     els_nlayers_isLoaded;
  vector<int> els_nlayers3D_;
  TBranch *els_nlayers3D_branch;
  bool     els_nlayers3D_isLoaded;
  vector<int> els_nlayersLost_;
  TBranch *els_nlayersLost_branch;
  bool     els_nlayersLost_isLoaded;
  vector<int> els_sccharge_;
  TBranch *els_sccharge_branch;
  bool     els_sccharge_isLoaded;
  vector<int> els_trk_charge_;
  TBranch *els_trk_charge_branch;
  bool     els_trk_charge_isLoaded;
  vector<int> els_type_;
  TBranch *els_type_branch;
  bool     els_type_isLoaded;
  vector<int> els_validHits_;
  TBranch *els_validHits_branch;
  bool     els_validHits_isLoaded;
  vector<int> els_valid_pixelhits_;
  TBranch *els_valid_pixelhits_branch;
  bool     els_valid_pixelhits_isLoaded;
  vector<int> els_passVIDNonTrigMvaWP80Id_;
  TBranch *els_passVIDNonTrigMvaWP80Id_branch;
  bool     els_passVIDNonTrigMvaWP80Id_isLoaded;
  vector<int> els_passVIDNonTrigMvaWP90Id_;
  TBranch *els_passVIDNonTrigMvaWP90Id_branch;
  bool     els_passVIDNonTrigMvaWP90Id_isLoaded;
  vector<int> els_passVIDTrigMvaWP80Id_;
  TBranch *els_passVIDTrigMvaWP80Id_branch;
  bool     els_passVIDTrigMvaWP80Id_isLoaded;
  vector<int> els_passVIDTrigMvaWP90Id_;
  TBranch *els_passVIDTrigMvaWP90Id_branch;
  bool     els_passVIDTrigMvaWP90Id_isLoaded;
  vector<int> genps_id_;
  TBranch *genps_id_branch;
  bool     genps_id_isLoaded;
  vector<int> genps_id_mother_;
  TBranch *genps_id_mother_branch;
  bool     genps_id_mother_isLoaded;
  vector<int> genps_id_simplegrandma_;
  TBranch *genps_id_simplegrandma_branch;
  bool     genps_id_simplegrandma_isLoaded;
  vector<int> genps_id_simplemother_;
  TBranch *genps_id_simplemother_branch;
  bool     genps_id_simplemother_isLoaded;
  vector<int> genps_idx_mother_;
  TBranch *genps_idx_mother_branch;
  bool     genps_idx_mother_isLoaded;
  vector<int> genps_idx_simplemother_;
  TBranch *genps_idx_simplemother_branch;
  bool     genps_idx_simplemother_isLoaded;
  vector<int> genps_status_;
  TBranch *genps_status_branch;
  bool     genps_status_isLoaded;
  vector<int> hyp_ll_charge_;
  TBranch *hyp_ll_charge_branch;
  bool     hyp_ll_charge_isLoaded;
  vector<int> hyp_ll_id_;
  TBranch *hyp_ll_id_branch;
  bool     hyp_ll_id_isLoaded;
  vector<int> hyp_ll_index_;
  TBranch *hyp_ll_index_branch;
  bool     hyp_ll_index_isLoaded;
  vector<int> hyp_lt_charge_;
  TBranch *hyp_lt_charge_branch;
  bool     hyp_lt_charge_isLoaded;
  vector<int> hyp_lt_id_;
  TBranch *hyp_lt_id_branch;
  bool     hyp_lt_id_isLoaded;
  vector<int> hyp_lt_index_;
  TBranch *hyp_lt_index_branch;
  bool     hyp_lt_index_isLoaded;
  vector<int> hyp_type_;
  TBranch *hyp_type_branch;
  bool     hyp_type_isLoaded;
  vector<int> isotracks_charge_;
  TBranch *isotracks_charge_branch;
  bool     isotracks_charge_isLoaded;
  vector<int> isotracks_fromPV_;
  TBranch *isotracks_fromPV_branch;
  bool     isotracks_fromPV_isLoaded;
  vector<int> isotracks_numberOfLostHitsInner_;
  TBranch *isotracks_numberOfLostHitsInner_branch;
  bool     isotracks_numberOfLostHitsInner_isLoaded;
  vector<int> isotracks_numberOfLostHitsOuter_;
  TBranch *isotracks_numberOfLostHitsOuter_branch;
  bool     isotracks_numberOfLostHitsOuter_isLoaded;
  vector<int> isotracks_numberOfLostPixelHitsInner_;
  TBranch *isotracks_numberOfLostPixelHitsInner_branch;
  bool     isotracks_numberOfLostPixelHitsInner_isLoaded;
  vector<int> isotracks_numberOfValidPixelHits_;
  TBranch *isotracks_numberOfValidPixelHits_branch;
  bool     isotracks_numberOfValidPixelHits_isLoaded;
  vector<int> isotracks_particleId_;
  TBranch *isotracks_particleId_branch;
  bool     isotracks_particleId_isLoaded;
  vector<int> isotracks_pixelLayersWithMeasurement_;
  TBranch *isotracks_pixelLayersWithMeasurement_branch;
  bool     isotracks_pixelLayersWithMeasurement_isLoaded;
  vector<int> isotracks_trackerLayersWithMeasurement_;
  TBranch *isotracks_trackerLayersWithMeasurement_branch;
  bool     isotracks_trackerLayersWithMeasurement_isLoaded;
  vector<int> mus_algo_;
  TBranch *mus_algo_branch;
  bool     mus_algo_isLoaded;
  vector<int> mus_algoOrig_;
  TBranch *mus_algoOrig_branch;
  bool     mus_algoOrig_isLoaded;
  vector<int> mus_bfit_algo_;
  TBranch *mus_bfit_algo_branch;
  bool     mus_bfit_algo_isLoaded;
  vector<int> mus_charge_;
  TBranch *mus_charge_branch;
  bool     mus_charge_isLoaded;
  vector<int> mus_exp_innerlayers_;
  TBranch *mus_exp_innerlayers_branch;
  bool     mus_exp_innerlayers_isLoaded;
  vector<int> mus_exp_outerlayers_;
  TBranch *mus_exp_outerlayers_branch;
  bool     mus_exp_outerlayers_isLoaded;
  vector<int> mus_gfit_algo_;
  TBranch *mus_gfit_algo_branch;
  bool     mus_gfit_algo_isLoaded;
  vector<int> mus_gfit_ndof_;
  TBranch *mus_gfit_ndof_branch;
  bool     mus_gfit_ndof_isLoaded;
  vector<int> mus_gfit_validSTAHits_;
  TBranch *mus_gfit_validSTAHits_branch;
  bool     mus_gfit_validSTAHits_isLoaded;
  vector<int> mus_iso03_ntrk_;
  TBranch *mus_iso03_ntrk_branch;
  bool     mus_iso03_ntrk_isLoaded;
  vector<int> mus_lostHits_;
  TBranch *mus_lostHits_branch;
  bool     mus_lostHits_isLoaded;
  vector<int> mus_mc_patMatch_id_;
  TBranch *mus_mc_patMatch_id_branch;
  bool     mus_mc_patMatch_id_isLoaded;
  vector<int> mus_nlayers_;
  TBranch *mus_nlayers_branch;
  bool     mus_nlayers_isLoaded;
  vector<int> mus_numberOfMatchedStations_;
  TBranch *mus_numberOfMatchedStations_branch;
  bool     mus_numberOfMatchedStations_isLoaded;
  vector<int> mus_pfcharge_;
  TBranch *mus_pfcharge_branch;
  bool     mus_pfcharge_isLoaded;
  vector<int> mus_pfidx_;
  TBranch *mus_pfidx_branch;
  bool     mus_pfidx_isLoaded;
  vector<int> mus_pfparticleId_;
  TBranch *mus_pfparticleId_branch;
  bool     mus_pfparticleId_isLoaded;
  vector<int> mus_pid_PFMuon_;
  TBranch *mus_pid_PFMuon_branch;
  bool     mus_pid_PFMuon_isLoaded;
  vector<int> mus_pid_TM2DCompatibilityLoose_;
  TBranch *mus_pid_TM2DCompatibilityLoose_branch;
  bool     mus_pid_TM2DCompatibilityLoose_isLoaded;
  vector<int> mus_pid_TM2DCompatibilityTight_;
  TBranch *mus_pid_TM2DCompatibilityTight_branch;
  bool     mus_pid_TM2DCompatibilityTight_isLoaded;
  vector<int> mus_pid_TMLastStationLoose_;
  TBranch *mus_pid_TMLastStationLoose_branch;
  bool     mus_pid_TMLastStationLoose_isLoaded;
  vector<int> mus_pid_TMLastStationTight_;
  TBranch *mus_pid_TMLastStationTight_branch;
  bool     mus_pid_TMLastStationTight_isLoaded;
  vector<int> mus_pid_TMOneStationTight_;
  TBranch *mus_pid_TMOneStationTight_branch;
  bool     mus_pid_TMOneStationTight_isLoaded;
  vector<int> mus_type_;
  TBranch *mus_type_branch;
  bool     mus_type_isLoaded;
  vector<int> mus_validHits_;
  TBranch *mus_validHits_branch;
  bool     mus_validHits_isLoaded;
  vector<int> mus_validPixelHits_;
  TBranch *mus_validPixelHits_branch;
  bool     mus_validPixelHits_isLoaded;
  vector<int> pfcands_IdAssociatedPV_;
  TBranch *pfcands_IdAssociatedPV_branch;
  bool     pfcands_IdAssociatedPV_isLoaded;
  vector<int> pfcands_charge_;
  TBranch *pfcands_charge_branch;
  bool     pfcands_charge_isLoaded;
  vector<int> pfcands_numberOfHits_;
  TBranch *pfcands_numberOfHits_branch;
  bool     pfcands_numberOfHits_isLoaded;
  vector<int> pfcands_numberOfPixelHits_;
  TBranch *pfcands_numberOfPixelHits_branch;
  bool     pfcands_numberOfPixelHits_isLoaded;
  vector<int> pfcands_particleId_;
  TBranch *pfcands_particleId_branch;
  bool     pfcands_particleId_isLoaded;
  vector<int> pfcands_pixelLayersWithMeasurement_;
  TBranch *pfcands_pixelLayersWithMeasurement_branch;
  bool     pfcands_pixelLayersWithMeasurement_isLoaded;
  vector<int> pfcands_stripLayersWithMeasurement_;
  TBranch *pfcands_stripLayersWithMeasurement_branch;
  bool     pfcands_stripLayersWithMeasurement_isLoaded;
  vector<int> pfjets_chargedHadronMultiplicity_;
  TBranch *pfjets_chargedHadronMultiplicity_branch;
  bool     pfjets_chargedHadronMultiplicity_isLoaded;
  vector<int> pfjets_chargedMultiplicity_;
  TBranch *pfjets_chargedMultiplicity_branch;
  bool     pfjets_chargedMultiplicity_isLoaded;
  vector<int> pfjets_electronMultiplicity_;
  TBranch *pfjets_electronMultiplicity_branch;
  bool     pfjets_electronMultiplicity_isLoaded;
  vector<int> pfjets_hadronFlavour_;
  TBranch *pfjets_hadronFlavour_branch;
  bool     pfjets_hadronFlavour_isLoaded;
  vector<int> pfjets_muonMultiplicity_;
  TBranch *pfjets_muonMultiplicity_branch;
  bool     pfjets_muonMultiplicity_isLoaded;
  vector<int> pfjets_neutralHadronMultiplicity_;
  TBranch *pfjets_neutralHadronMultiplicity_branch;
  bool     pfjets_neutralHadronMultiplicity_isLoaded;
  vector<int> pfjets_neutralMultiplicity_;
  TBranch *pfjets_neutralMultiplicity_branch;
  bool     pfjets_neutralMultiplicity_isLoaded;
  vector<int> pfjets_npfcands_;
  TBranch *pfjets_npfcands_branch;
  bool     pfjets_npfcands_isLoaded;
  vector<int> pfjets_partonFlavour_;
  TBranch *pfjets_partonFlavour_branch;
  bool     pfjets_partonFlavour_isLoaded;
  vector<int> pfjets_photonMultiplicity_;
  TBranch *pfjets_photonMultiplicity_branch;
  bool     pfjets_photonMultiplicity_isLoaded;
  vector<int> pfjets_totalMultiplicity_;
  TBranch *pfjets_totalMultiplicity_branch;
  bool     pfjets_totalMultiplicity_isLoaded;
  vector<int> pfjets_puppi_chargedHadronMultiplicity_;
  TBranch *pfjets_puppi_chargedHadronMultiplicity_branch;
  bool     pfjets_puppi_chargedHadronMultiplicity_isLoaded;
  vector<int> pfjets_puppi_chargedMultiplicity_;
  TBranch *pfjets_puppi_chargedMultiplicity_branch;
  bool     pfjets_puppi_chargedMultiplicity_isLoaded;
  vector<int> pfjets_puppi_electronMultiplicity_;
  TBranch *pfjets_puppi_electronMultiplicity_branch;
  bool     pfjets_puppi_electronMultiplicity_isLoaded;
  vector<int> pfjets_puppi_hadronFlavour_;
  TBranch *pfjets_puppi_hadronFlavour_branch;
  bool     pfjets_puppi_hadronFlavour_isLoaded;
  vector<int> pfjets_puppi_muonMultiplicity_;
  TBranch *pfjets_puppi_muonMultiplicity_branch;
  bool     pfjets_puppi_muonMultiplicity_isLoaded;
  vector<int> pfjets_puppi_neutralHadronMultiplicity_;
  TBranch *pfjets_puppi_neutralHadronMultiplicity_branch;
  bool     pfjets_puppi_neutralHadronMultiplicity_isLoaded;
  vector<int> pfjets_puppi_neutralMultiplicity_;
  TBranch *pfjets_puppi_neutralMultiplicity_branch;
  bool     pfjets_puppi_neutralMultiplicity_isLoaded;
  vector<int> pfjets_puppi_npfcands_;
  TBranch *pfjets_puppi_npfcands_branch;
  bool     pfjets_puppi_npfcands_isLoaded;
  vector<int> pfjets_puppi_partonFlavour_;
  TBranch *pfjets_puppi_partonFlavour_branch;
  bool     pfjets_puppi_partonFlavour_isLoaded;
  vector<int> pfjets_puppi_photonMultiplicity_;
  TBranch *pfjets_puppi_photonMultiplicity_branch;
  bool     pfjets_puppi_photonMultiplicity_isLoaded;
  vector<int> pfjets_puppi_totalMultiplicity_;
  TBranch *pfjets_puppi_totalMultiplicity_branch;
  bool     pfjets_puppi_totalMultiplicity_isLoaded;
  vector<int> taus_pf_charge_;
  TBranch *taus_pf_charge_branch;
  bool     taus_pf_charge_isLoaded;
  vector<int> photons_photonID_loose_;
  TBranch *photons_photonID_loose_branch;
  bool     photons_photonID_loose_isLoaded;
  vector<int> photons_photonID_tight_;
  TBranch *photons_photonID_tight_branch;
  bool     photons_photonID_tight_isLoaded;
  vector<int> puInfo_bunchCrossing_;
  TBranch *puInfo_bunchCrossing_branch;
  bool     puInfo_bunchCrossing_isLoaded;
  vector<int> puInfo_nPUvertices_;
  TBranch *puInfo_nPUvertices_branch;
  bool     puInfo_nPUvertices_isLoaded;
  vector<int> svs_nTrks_;
  TBranch *svs_nTrks_branch;
  bool     svs_nTrks_isLoaded;
  vector<int> _npfcands_;
  TBranch *_npfcands_branch;
  bool     _npfcands_isLoaded;
  vector<int> ak8jets_partonFlavour_;
  TBranch *ak8jets_partonFlavour_branch;
  bool     ak8jets_partonFlavour_isLoaded;
  vector<int> vtxs_isFake_;
  TBranch *vtxs_isFake_branch;
  bool     vtxs_isFake_isLoaded;
  vector<int> vtxs_isValid_;
  TBranch *vtxs_isValid_branch;
  bool     vtxs_isValid_isLoaded;
  vector<vector<int> > genps_lepdaughter_id_;
  TBranch *genps_lepdaughter_id_branch;
  bool     genps_lepdaughter_id_isLoaded;
  vector<vector<int> > genps_lepdaughter_idx_;
  TBranch *genps_lepdaughter_idx_branch;
  bool     genps_lepdaughter_idx_isLoaded;
  vector<vector<int> > photons_PFCand_idx_;
  TBranch *photons_PFCand_idx_branch;
  bool     photons_PFCand_idx_isLoaded;
  vector<unsigned char> pfcands_fromPV_;
  TBranch *pfcands_fromPV_branch;
  bool     pfcands_fromPV_isLoaded;
  vector<unsigned char> pfcands_normalizedChi2_;
  TBranch *pfcands_normalizedChi2_branch;
  bool     pfcands_normalizedChi2_isLoaded;
  vector<unsigned char> pfcands_packedHits_;
  TBranch *pfcands_packedHits_branch;
  bool     pfcands_packedHits_isLoaded;
  vector<unsigned char> pfcands_packedLayers_;
  TBranch *pfcands_packedLayers_branch;
  bool     pfcands_packedLayers_isLoaded;
  vector<unsigned char> pfcands_pvAssociationQuality_;
  TBranch *pfcands_pvAssociationQuality_branch;
  bool     pfcands_pvAssociationQuality_isLoaded;
  unsigned int evt_nels_;
  TBranch *evt_nels_branch;
  bool     evt_nels_isLoaded;
  unsigned int evt_detectorStatus_;
  TBranch *evt_detectorStatus_branch;
  bool     evt_detectorStatus_isLoaded;
  unsigned int evt_lumiBlock_;
  TBranch *evt_lumiBlock_branch;
  bool     evt_lumiBlock_isLoaded;
  unsigned int evt_run_;
  TBranch *evt_run_branch;
  bool     evt_run_isLoaded;
  unsigned int evt_ngenjetsNoMuNoNu_;
  TBranch *evt_ngenjetsNoMuNoNu_branch;
  bool     evt_ngenjetsNoMuNoNu_isLoaded;
  unsigned int genps_signalProcessID_;
  TBranch *genps_signalProcessID_branch;
  bool     genps_signalProcessID_isLoaded;
  unsigned int evt_nphotons_;
  TBranch *evt_nphotons_branch;
  bool     evt_nphotons_isLoaded;
  unsigned int evt_nvtxs_;
  TBranch *evt_nvtxs_branch;
  bool     evt_nvtxs_isLoaded;
  vector<unsigned int> hlt_l1prescales_;
  TBranch *hlt_l1prescales_branch;
  bool     hlt_l1prescales_isLoaded;
  vector<unsigned int> hlt_prescales_;
  TBranch *hlt_prescales_branch;
  bool     hlt_prescales_isLoaded;
  vector<vector<unsigned int> > isotracks_crossedHcalStatus_;
  TBranch *isotracks_crossedHcalStatus_branch;
  bool     isotracks_crossedHcalStatus_isLoaded;
  ULong64_t evt_event_;
  TBranch *evt_event_branch;
  bool     evt_event_isLoaded;
  vector<ULong64_t> evt_timestamp_;
  TBranch *evt_timestamp_branch;
  bool     evt_timestamp_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const vector<string> &genweightsID();
  const TBits &hlt_bits();
  const vector<TString> &evt_CMS3tag();
  const vector<TString> &evt_dataset();
  const vector<TString> &hlt_trigNames();
  const vector<TString> &pfjets_bDiscriminatorNames();
  const vector<TString> &pfjets_puppi_bDiscriminatorNames();
  const vector<TString> &taus_pf_IDnames();
  const bool &evt_cscTightHaloId();
  const bool &evt_hbheFilter();
  const bool &filt_chargedHadronTrackResolution();
  const bool &filt_cscBeamHalo();
  const bool &filt_cscBeamHalo2015();
  const bool &filt_cscBeamHaloTrkMuUnveto();
  const bool &filt_ecalBoundaryEnergy();
  const bool &filt_ecalLaser();
  const bool &filt_ecalTP();
  const bool &filt_eeBadSc();
  const bool &filt_globalSuperTightHalo2016();
  const bool &filt_globalTightHalo2016();
  const bool &filt_goodVertices();
  const bool &filt_hbheNoise();
  const bool &filt_hbheNoiseIso();
  const bool &filt_hcalLaser();
  const bool &filt_hcalStrip();
  const bool &filt_metfilter();
  const bool &filt_muonBadTrack();
  const bool &filt_trackingFailure();
  const bool &filt_trkPOGFilters();
  const bool &filt_trkPOG_logErrorTooManyClusters();
  const bool &filt_trkPOG_manystripclus53X();
  const bool &filt_trkPOG_toomanystripclus53X();
  const vector<bool> &els_conv_vtx_flag();
  const vector<bool> &els_isGsfCtfScPixChargeConsistent();
  const vector<bool> &genps_fromHardProcessBeforeFSR();
  const vector<bool> &genps_fromHardProcessDecayed();
  const vector<bool> &genps_fromHardProcessFinalState();
  const vector<bool> &genps_isDirectHardProcessTauDecayProductFinalState();
  const vector<bool> &genps_isDirectPromptTauDecayProductFinalState();
  const vector<bool> &genps_isHardProcess();
  const vector<bool> &genps_isLastCopy();
  const vector<bool> &genps_isLastCopyBeforeFSR();
  const vector<bool> &genps_isMostlyLikePythia6Status3();
  const vector<bool> &genps_isPromptDecayed();
  const vector<bool> &genps_isPromptFinalState();
  const vector<bool> &isotracks_isHighPurityTrack();
  const vector<bool> &isotracks_isPFCand();
  const vector<bool> &isotracks_isTightTrack();
  const vector<bool> &pfcands_isGlobalMuon();
  const vector<bool> &pfcands_isStandAloneMuon();
  const vector<bool> &pfcands_trackHighPurity();
  const vector<bool> &photons_haspixelSeed();
  const vector<bool> &photons_passElectronVeto();
  const float &evt_bField();
  const float &evt_instantLumi();
  const float &evt_instantLumiErr();
  const float &evt_lumiFill();
  const float &evt_lumiRun();
  const float &evt_pileup();
  const float &evt_pileupRMS();
  const float &evt_fixgrid_all_rho();
  const float &evt_fixgridfastjet_allcalo_rho();
  const float &evt_fixgridfastjet_central_rho();
  const float &evt_fixgridfastjet_all_rho();
  const float &evt_fixgridfastjet_centralcalo_rho();
  const float &evt_fixgridfastjet_centralchargedpileup_rho();
  const float &evt_fixgridfastjet_centralneutral_rho();
  const float &evt_kfactor();
  const float &evt_scale1fb();
  const float &evt_xsec_excl();
  const float &evt_xsec_incl();
  const float &genps_alphaQCD();
  const float &genps_pthat();
  const float &genps_qScale();
  const float &genps_weight();
  const float &gen_sumEt();
  const float &pdfinfo_pdf1();
  const float &pdfinfo_pdf2();
  const float &pdfinfo_scale();
  const float &pdfinfo_x1();
  const float &pdfinfo_x2();
  const float &evt_calomet();
  const float &evt_calometPhi();
  const float &evt_pfmet();
  const float &evt_pfmet_ElectronEnDown();
  const float &evt_pfmet_ElectronEnUp();
  const float &evt_pfmet_JetEnDown();
  const float &evt_pfmet_JetEnUp();
  const float &evt_pfmet_JetResDown();
  const float &evt_pfmet_JetResUp();
  const float &evt_pfmet_MuonEnDown();
  const float &evt_pfmet_MuonEnUp();
  const float &evt_pfmetPhi();
  const float &evt_pfmetPhi_ElectronEnDown();
  const float &evt_pfmetPhi_ElectronEnUp();
  const float &evt_pfmetPhi_JetEnDown();
  const float &evt_pfmetPhi_JetEnUp();
  const float &evt_pfmetPhi_JetResDown();
  const float &evt_pfmetPhi_JetResUp();
  const float &evt_pfmetPhi_MuonEnDown();
  const float &evt_pfmetPhi_MuonEnUp();
  const float &evt_pfmetPhi_PhotonEnDown();
  const float &evt_pfmetPhi_PhotonEnUp();
  const float &evt_pfmetPhi_TauEnDown();
  const float &evt_pfmetPhi_TauEnUp();
  const float &evt_pfmetPhi_UnclusteredEnDown();
  const float &evt_pfmetPhi_UnclusteredEnUp();
  const float &evt_pfmetPhi_raw();
  const float &evt_pfmet_PhotonEnDown();
  const float &evt_pfmet_PhotonEnUp();
  const float &evt_pfmetSig();
  const float &evt_pfmetSignificance();
  const float &evt_pfmet_TauEnDown();
  const float &evt_pfmet_TauEnUp();
  const float &evt_pfmet_UnclusteredEnDown();
  const float &evt_pfmet_UnclusteredEnUp();
  const float &evt_pfmet_raw();
  const float &evt_pfsumet();
  const float &evt_pfsumet_raw();
  const float &gen_met();
  const float &gen_metPhi();
  const float &evt_puppi_calomet();
  const float &evt_puppi_calometPhi();
  const float &evt_puppi_pfmet();
  const float &evt_puppi_pfmet_ElectronEnDown();
  const float &evt_puppi_pfmet_ElectronEnUp();
  const float &evt_puppi_pfmet_JetEnDown();
  const float &evt_puppi_pfmet_JetEnUp();
  const float &evt_puppi_pfmet_JetResDown();
  const float &evt_puppi_pfmet_JetResUp();
  const float &evt_puppi_pfmet_MuonEnDown();
  const float &evt_puppi_pfmet_MuonEnUp();
  const float &evt_puppi_pfmetPhi();
  const float &evt_puppi_pfmetPhi_ElectronEnDown();
  const float &evt_puppi_pfmetPhi_ElectronEnUp();
  const float &evt_puppi_pfmetPhi_JetEnDown();
  const float &evt_puppi_pfmetPhi_JetEnUp();
  const float &evt_puppi_pfmetPhi_JetResDown();
  const float &evt_puppi_pfmetPhi_JetResUp();
  const float &evt_puppi_pfmetPhi_MuonEnDown();
  const float &evt_puppi_pfmetPhi_MuonEnUp();
  const float &evt_puppi_pfmetPhi_PhotonEnDown();
  const float &evt_puppi_pfmetPhi_PhotonEnUp();
  const float &evt_puppi_pfmetPhi_TauEnDown();
  const float &evt_puppi_pfmetPhi_TauEnUp();
  const float &evt_puppi_pfmetPhi_UnclusteredEnDown();
  const float &evt_puppi_pfmetPhi_UnclusteredEnUp();
  const float &evt_puppi_pfmetPhi_raw();
  const float &evt_puppi_pfmet_PhotonEnDown();
  const float &evt_puppi_pfmet_PhotonEnUp();
  const float &evt_puppi_pfmetSig();
  const float &evt_puppi_pfmetSignificance();
  const float &evt_puppi_pfmet_TauEnDown();
  const float &evt_puppi_pfmet_TauEnUp();
  const float &evt_puppi_pfmet_UnclusteredEnDown();
  const float &evt_puppi_pfmet_UnclusteredEnUp();
  const float &evt_puppi_pfmet_raw();
  const float &evt_puppi_pfsumet();
  const float &evt_puppi_pfsumet_raw();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_motherp4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_motherp4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_mc_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_mc_motherp4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_mc_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_patMatch_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4In();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4Out();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_trk_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_trk_vertex_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_vertex_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genjets_p4NoMuNoNu();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_ll_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_lt_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &isotracks_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_bfit_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_gfit_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_patMatch_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_pfp4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_trk_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfcands_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_puppi_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &taus_pf_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &svs_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &svs_position();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_softdropPuppiSubjet1();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_softdropPuppiSubjet2();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &vtxs_position();
  const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &genps_lepdaughter_p4();
  const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &pfjets_pfcandmup4();
  const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &pfjets_puppi_pfcandmup4();
  const vector<float> &els_mc3dr();
  const vector<float> &els_mcdr();
  const vector<float> &mus_mc3dr();
  const vector<float> &mus_mcdr();
  const vector<float> &pfjets_mc3dr();
  const vector<float> &pfjets_mcdr();
  const vector<float> &photons_mc3dr();
  const vector<float> &photons_mcdr();
  const vector<float> &els_VIDNonTrigMvaValue();
  const vector<float> &els_VIDSpring16GPMvaValue();
  const vector<float> &els_VIDSpring16HZZMvaValue();
  const vector<float> &els_VIDTrigMvaValue();
  const vector<float> &els_chi2();
  const vector<float> &els_ckf_chi2();
  const vector<float> &els_ckf_ndof();
  const vector<float> &els_conv_vtx_prob();
  const vector<float> &els_d0Err();
  const vector<float> &els_dEtaIn();
  const vector<float> &els_dEtaOut();
  const vector<float> &els_dPhiIn();
  const vector<float> &els_dPhiOut();
  const vector<float> &els_dxyPV();
  const vector<float> &els_dzPV();
  const vector<float> &els_e1x5_full5x5();
  const vector<float> &els_e2x5Max_full5x5();
  const vector<float> &els_e5x5_full5x5();
  const vector<float> &els_eOverPIn();
  const vector<float> &els_eOverPOut();
  const vector<float> &els_eSC();
  const vector<float> &els_eSCPresh();
  const vector<float> &els_eSCRaw();
  const vector<float> &els_eSeed();
  const vector<float> &els_ecalEnergy();
  const vector<float> &els_ecalEnergyError();
  const vector<float> &els_ecalIso();
  const vector<float> &els_ecalIso04();
  const vector<float> &els_ecalPFClusterIso();
  const vector<float> &els_etaSC();
  const vector<float> &els_etaSCwidth();
  const vector<float> &els_fbrem();
  const vector<float> &els_full5x5_hOverE();
  const vector<float> &els_hOverE();
  const vector<float> &els_hcalDepth1TowerSumEt();
  const vector<float> &els_hcalIso();
  const vector<float> &els_hcalIso04();
  const vector<float> &els_hcalPFClusterIso();
  const vector<float> &els_ip2d();
  const vector<float> &els_ip2derr();
  const vector<float> &els_ip3d();
  const vector<float> &els_ip3derr();
  const vector<float> &els_mc_patMatch_dr();
  const vector<float> &els_miniIso_ch();
  const vector<float> &els_miniIso_db();
  const vector<float> &els_miniIso_em();
  const vector<float> &els_miniIso_nh();
  const vector<float> &els_miniIso_uncor();
  const vector<float> &els_ndof();
  const vector<float> &els_pfChargedHadronIso();
  const vector<float> &els_pfNeutralHadronIso();
  const vector<float> &els_pfPUIso();
  const vector<float> &els_pfPhotonIso();
  const vector<float> &els_phiSC();
  const vector<float> &els_phiSCwidth();
  const vector<float> &els_ptErr();
  const vector<float> &els_ptErrGsf();
  const vector<float> &els_r9();
  const vector<float> &els_r9_full5x5();
  const vector<float> &els_scSeedEta();
  const vector<float> &els_sigmaEtaEta_full5x5();
  const vector<float> &els_sigmaIEtaIEta();
  const vector<float> &els_sigmaIEtaIEta_full5x5();
  const vector<float> &els_sigmaIPhiIPhi();
  const vector<float> &els_sigmaIPhiIPhi_full5x5();
  const vector<float> &els_tkIso();
  const vector<float> &els_tkIso04();
  const vector<float> &els_trackMomentumError();
  const vector<float> &els_trkdr();
  const vector<float> &els_trkshFrac();
  const vector<float> &els_z0Err();
  const vector<float> &genps_charge();
  const vector<float> &genps_iso();
  const vector<float> &genweights();
  const vector<float> &isotracks_dEdxPixel();
  const vector<float> &isotracks_dEdxStrip();
  const vector<float> &isotracks_deltaEta();
  const vector<float> &isotracks_deltaPhi();
  const vector<float> &isotracks_dxy();
  const vector<float> &isotracks_dxyError();
  const vector<float> &isotracks_dz();
  const vector<float> &isotracks_dzError();
  const vector<float> &isotracks_matchedCaloJetEmEnergy();
  const vector<float> &isotracks_matchedCaloJetHadEnergy();
  const vector<float> &isotracks_miniIso_ch();
  const vector<float> &isotracks_miniIso_db();
  const vector<float> &isotracks_miniIso_em();
  const vector<float> &isotracks_miniIso_nh();
  const vector<float> &isotracks_pfIso_ch();
  const vector<float> &isotracks_pfIso_db();
  const vector<float> &isotracks_pfIso_em();
  const vector<float> &isotracks_pfIso_nh();
  const vector<float> &mus_bfit_ptErr();
  const vector<float> &mus_caloCompatibility();
  const vector<float> &mus_chi2LocalMomentum();
  const vector<float> &mus_chi2LocalPosition();
  const vector<float> &mus_d0Err();
  const vector<float> &mus_dxyPV();
  const vector<float> &mus_dzPV();
  const vector<float> &mus_ecal_time();
  const vector<float> &mus_gfit_chi2();
  const vector<float> &mus_gfit_ptErr();
  const vector<float> &mus_hcal_time();
  const vector<float> &mus_ip2d();
  const vector<float> &mus_ip2derr();
  const vector<float> &mus_ip3d();
  const vector<float> &mus_ip3derr();
  const vector<float> &mus_iso03_emEt();
  const vector<float> &mus_iso03_hadEt();
  const vector<float> &mus_iso03_sumPt();
  const vector<float> &mus_isoR03_pf_ChargedHadronPt();
  const vector<float> &mus_isoR03_pf_ChargedParticlePt();
  const vector<float> &mus_isoR03_pf_NeutralHadronEt();
  const vector<float> &mus_isoR03_pf_NeutralHadronEtHighThreshold();
  const vector<float> &mus_isoR03_pf_PUPt();
  const vector<float> &mus_isoR03_pf_PhotonEt();
  const vector<float> &mus_isoR03_pf_PhotonEtHighThreshold();
  const vector<float> &mus_isoR04_pf_ChargedHadronPt();
  const vector<float> &mus_isoR04_pf_ChargedParticlePt();
  const vector<float> &mus_isoR04_pf_NeutralHadronEt();
  const vector<float> &mus_isoR04_pf_NeutralHadronEtHighThreshold();
  const vector<float> &mus_isoR04_pf_PUPt();
  const vector<float> &mus_isoR04_pf_PhotonEt();
  const vector<float> &mus_isoR04_pf_PhotonEtHighThreshold();
  const vector<float> &mus_iso_ecalvetoDep();
  const vector<float> &mus_iso_hcalvetoDep();
  const vector<float> &mus_iso_hovetoDep();
  const vector<float> &mus_iso_trckvetoDep();
  const vector<float> &mus_mc_patMatch_dr();
  const vector<float> &mus_miniIso_ch();
  const vector<float> &mus_miniIso_db();
  const vector<float> &mus_miniIso_em();
  const vector<float> &mus_miniIso_nh();
  const vector<float> &mus_miniIso_uncor();
  const vector<float> &mus_ptErr();
  const vector<float> &mus_segmCompatibility();
  const vector<float> &mus_trkKink();
  const vector<float> &mus_z0Err();
  const vector<float> &pfcands_dxy();
  const vector<float> &pfcands_dxyError();
  const vector<float> &pfcands_dz();
  const vector<float> &pfcands_dzAssociatedPV();
  const vector<float> &pfcands_dzError();
  const vector<float> &pfcands_mass();
  const vector<float> &pfcands_miniTrackIso();
  const vector<float> &pfcands_puppiWeight();
  const vector<float> &pfcands_puppiWeightNoLep();
  const vector<float> &pfcands_trackIso();
  const vector<float> &pfjets_area();
  const vector<float> &pfjets_axis1();
  const vector<float> &pfjets_chargedEmE();
  const vector<float> &pfjets_chargedHadronE();
  const vector<float> &pfjets_electronE();
  const vector<float> &pfjets_hfEmE();
  const vector<float> &pfjets_hfHadronE();
  const vector<float> &pfjets_muonE();
  const vector<float> &pfjets_neutralEmE();
  const vector<float> &pfjets_neutralHadronE();
  const vector<float> &pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag();
  const vector<float> &pfjets_pfDeepCSVJetTagsprobbPlusprobbb();
  const vector<float> &pfjets_photonE();
  const vector<float> &pfjets_pileupJetId();
  const vector<float> &pfjets_ptDistribution();
  const vector<float> &pfjets_undoJEC();
  const vector<float> &pfjets_puppi_area();
  const vector<float> &pfjets_puppi_axis1();
  const vector<float> &pfjets_puppi_chargedEmE();
  const vector<float> &pfjets_puppi_chargedHadronE();
  const vector<float> &pfjets_puppi_electronE();
  const vector<float> &pfjets_puppi_hfEmE();
  const vector<float> &pfjets_puppi_hfHadronE();
  const vector<float> &pfjets_puppi_muonE();
  const vector<float> &pfjets_puppi_neutralEmE();
  const vector<float> &pfjets_puppi_neutralHadronE();
  const vector<float> &pfjets_puppi_pfCombinedInclusiveSecondaryVertexV2BJetTag();
  const vector<float> &pfjets_puppi_pfDeepCSVJetTagsprobbPlusprobbb();
  const vector<float> &pfjets_puppi_photonE();
  const vector<float> &pfjets_puppi_pileupJetId();
  const vector<float> &pfjets_puppi_ptDistribution();
  const vector<float> &pfjets_puppi_undoJEC();
  const vector<float> &photons_ecalPFClusterIso();
  const vector<float> &photons_full5x5_hOverE();
  const vector<float> &photons_full5x5_hOverEtowBC();
  const vector<float> &photons_full5x5_r9();
  const vector<float> &photons_full5x5_sigmaIEtaIEta();
  const vector<float> &photons_hOverE();
  const vector<float> &photons_hOverEtowBC();
  const vector<float> &photons_hcalPFClusterIso();
  const vector<float> &photons_ntkIsoHollow03();
  const vector<float> &photons_recoChargedHadronIso();
  const vector<float> &photons_recoNeutralHadronIso();
  const vector<float> &photons_recoPhotonIso();
  const vector<float> &photons_sigmaIEtaIEta();
  const vector<float> &photons_tkIsoHollow03();
  const vector<float> &puInfo_trueNumInteractions();
  const vector<float> &svs_anglePV();
  const vector<float> &svs_chi2();
  const vector<float> &svs_dist3Dsig();
  const vector<float> &svs_dist3Dval();
  const vector<float> &svs_distXYsig();
  const vector<float> &svs_distXYval();
  const vector<float> &svs_ndof();
  const vector<float> &svs_prob();
  const vector<float> &svs_xError();
  const vector<float> &svs_yError();
  const vector<float> &svs_zError();
  const vector<float> &ak8jets_area();
  const vector<float> &ak8jets_mass();
  const vector<float> &ak8jets_nJettinessTau1();
  const vector<float> &ak8jets_nJettinessTau2();
  const vector<float> &ak8jets_nJettinessTau3();
  const vector<float> &ak8jets_prunedMass();
  const vector<float> &ak8jets_puppi_eta();
  const vector<float> &ak8jets_puppi_mass();
  const vector<float> &ak8jets_puppi_nJettinessTau1();
  const vector<float> &ak8jets_puppi_nJettinessTau2();
  const vector<float> &ak8jets_puppi_nJettinessTau3();
  const vector<float> &ak8jets_puppi_phi();
  const vector<float> &ak8jets_puppi_pt();
  const vector<float> &ak8jets_puppi_softdropMass();
  const vector<float> &ak8jets_softdropMass();
  const vector<float> &ak8jets_undoJEC();
  const vector<float> &vtxs_ndof();
  const vector<vector<float> > &pfjets_bDiscriminators();
  const vector<vector<float> > &pfjets_puppi_bDiscriminators();
  const vector<vector<float> > &taus_pf_IDs();
  const vector<vector<float> > &puInfo_instLumi();
  const int &evt_bunchCrossing();
  const int &evt_experimentType();
  const int &evt_isRealData();
  const int &evt_orbitNumber();
  const int &evt_storeNumber();
  const int &pdfinfo_id1();
  const int &pdfinfo_id2();
  const vector<int> &els_mc3_id();
  const vector<int> &els_mc3idx();
  const vector<int> &els_mc3_motherid();
  const vector<int> &els_mc3_motheridx();
  const vector<int> &els_mc_id();
  const vector<int> &els_mc_motherid();
  const vector<int> &mus_mc3_id();
  const vector<int> &mus_mc3idx();
  const vector<int> &mus_mc3_motherid();
  const vector<int> &mus_mc3_motheridx();
  const vector<int> &mus_mc_id();
  const vector<int> &mus_mc_motherid();
  const vector<int> &pfjets_mc3_id();
  const vector<int> &pfjets_mc3idx();
  const vector<int> &pfjets_mc_motherid();
  const vector<int> &photons_mc3_id();
  const vector<int> &photons_mc3idx();
  const vector<int> &photons_mc3_motherid();
  const vector<int> &photons_mc3_motheridx();
  const vector<int> &photons_mc_id();
  const vector<int> &photons_mc_motherid();
  const vector<int> &els_VIDNonTrigMvaCat();
  const vector<int> &els_VIDSpring16GPMvaCat();
  const vector<int> &els_VIDSpring16HZZMvaCat();
  const vector<int> &els_VIDTrigMvaCat();
  const vector<int> &els_category();
  const vector<int> &els_charge();
  const vector<int> &els_ckf_charge();
  const vector<int> &els_ckf_laywithmeas();
  const vector<int> &els_exp_innerlayers();
  const vector<int> &els_exp_outerlayers();
  const vector<int> &els_isEB();
  const vector<int> &els_isEcalDriven();
  const vector<int> &els_isTrackerDriven();
  const vector<int> &els_lostHits();
  const vector<int> &els_lost_pixelhits();
  const vector<int> &els_mc_patMatch_id();
  const vector<int> &els_nlayers();
  const vector<int> &els_nlayers3D();
  const vector<int> &els_nlayersLost();
  const vector<int> &els_sccharge();
  const vector<int> &els_trk_charge();
  const vector<int> &els_type();
  const vector<int> &els_validHits();
  const vector<int> &els_valid_pixelhits();
  const vector<int> &els_passVIDNonTrigMvaWP80Id();
  const vector<int> &els_passVIDNonTrigMvaWP90Id();
  const vector<int> &els_passVIDTrigMvaWP80Id();
  const vector<int> &els_passVIDTrigMvaWP90Id();
  const vector<int> &genps_id();
  const vector<int> &genps_id_mother();
  const vector<int> &genps_id_simplegrandma();
  const vector<int> &genps_id_simplemother();
  const vector<int> &genps_idx_mother();
  const vector<int> &genps_idx_simplemother();
  const vector<int> &genps_status();
  const vector<int> &hyp_ll_charge();
  const vector<int> &hyp_ll_id();
  const vector<int> &hyp_ll_index();
  const vector<int> &hyp_lt_charge();
  const vector<int> &hyp_lt_id();
  const vector<int> &hyp_lt_index();
  const vector<int> &hyp_type();
  const vector<int> &isotracks_charge();
  const vector<int> &isotracks_fromPV();
  const vector<int> &isotracks_numberOfLostHitsInner();
  const vector<int> &isotracks_numberOfLostHitsOuter();
  const vector<int> &isotracks_numberOfLostPixelHitsInner();
  const vector<int> &isotracks_numberOfValidPixelHits();
  const vector<int> &isotracks_particleId();
  const vector<int> &isotracks_pixelLayersWithMeasurement();
  const vector<int> &isotracks_trackerLayersWithMeasurement();
  const vector<int> &mus_algo();
  const vector<int> &mus_algoOrig();
  const vector<int> &mus_bfit_algo();
  const vector<int> &mus_charge();
  const vector<int> &mus_exp_innerlayers();
  const vector<int> &mus_exp_outerlayers();
  const vector<int> &mus_gfit_algo();
  const vector<int> &mus_gfit_ndof();
  const vector<int> &mus_gfit_validSTAHits();
  const vector<int> &mus_iso03_ntrk();
  const vector<int> &mus_lostHits();
  const vector<int> &mus_mc_patMatch_id();
  const vector<int> &mus_nlayers();
  const vector<int> &mus_numberOfMatchedStations();
  const vector<int> &mus_pfcharge();
  const vector<int> &mus_pfidx();
  const vector<int> &mus_pfparticleId();
  const vector<int> &mus_pid_PFMuon();
  const vector<int> &mus_pid_TM2DCompatibilityLoose();
  const vector<int> &mus_pid_TM2DCompatibilityTight();
  const vector<int> &mus_pid_TMLastStationLoose();
  const vector<int> &mus_pid_TMLastStationTight();
  const vector<int> &mus_pid_TMOneStationTight();
  const vector<int> &mus_type();
  const vector<int> &mus_validHits();
  const vector<int> &mus_validPixelHits();
  const vector<int> &pfcands_IdAssociatedPV();
  const vector<int> &pfcands_charge();
  const vector<int> &pfcands_numberOfHits();
  const vector<int> &pfcands_numberOfPixelHits();
  const vector<int> &pfcands_particleId();
  const vector<int> &pfcands_pixelLayersWithMeasurement();
  const vector<int> &pfcands_stripLayersWithMeasurement();
  const vector<int> &pfjets_chargedHadronMultiplicity();
  const vector<int> &pfjets_chargedMultiplicity();
  const vector<int> &pfjets_electronMultiplicity();
  const vector<int> &pfjets_hadronFlavour();
  const vector<int> &pfjets_muonMultiplicity();
  const vector<int> &pfjets_neutralHadronMultiplicity();
  const vector<int> &pfjets_neutralMultiplicity();
  const vector<int> &pfjets_npfcands();
  const vector<int> &pfjets_partonFlavour();
  const vector<int> &pfjets_photonMultiplicity();
  const vector<int> &pfjets_totalMultiplicity();
  const vector<int> &pfjets_puppi_chargedHadronMultiplicity();
  const vector<int> &pfjets_puppi_chargedMultiplicity();
  const vector<int> &pfjets_puppi_electronMultiplicity();
  const vector<int> &pfjets_puppi_hadronFlavour();
  const vector<int> &pfjets_puppi_muonMultiplicity();
  const vector<int> &pfjets_puppi_neutralHadronMultiplicity();
  const vector<int> &pfjets_puppi_neutralMultiplicity();
  const vector<int> &pfjets_puppi_npfcands();
  const vector<int> &pfjets_puppi_partonFlavour();
  const vector<int> &pfjets_puppi_photonMultiplicity();
  const vector<int> &pfjets_puppi_totalMultiplicity();
  const vector<int> &taus_pf_charge();
  const vector<int> &photons_photonID_loose();
  const vector<int> &photons_photonID_tight();
  const vector<int> &puInfo_bunchCrossing();
  const vector<int> &puInfo_nPUvertices();
  const vector<int> &svs_nTrks();
  const vector<int> &_npfcands();
  const vector<int> &ak8jets_partonFlavour();
  const vector<int> &vtxs_isFake();
  const vector<int> &vtxs_isValid();
  const vector<vector<int> > &genps_lepdaughter_id();
  const vector<vector<int> > &genps_lepdaughter_idx();
  const vector<vector<int> > &photons_PFCand_idx();
  const vector<unsigned char> &pfcands_fromPV();
  const vector<unsigned char> &pfcands_normalizedChi2();
  const vector<unsigned char> &pfcands_packedHits();
  const vector<unsigned char> &pfcands_packedLayers();
  const vector<unsigned char> &pfcands_pvAssociationQuality();
  const unsigned int &evt_nels();
  const unsigned int &evt_detectorStatus();
  const unsigned int &evt_lumiBlock();
  const unsigned int &evt_run();
  const unsigned int &evt_ngenjetsNoMuNoNu();
  const unsigned int &genps_signalProcessID();
  const unsigned int &evt_nphotons();
  const unsigned int &evt_nvtxs();
  const vector<unsigned int> &hlt_l1prescales();
  const vector<unsigned int> &hlt_prescales();
  const vector<vector<unsigned int> > &isotracks_crossedHcalStatus();
  const ULong64_t &evt_event();
  const vector<ULong64_t> &evt_timestamp();
  bool passHLTTrigger(TString trigName);
  float passTauID(TString idName, unsigned int tauIndx);
  float getbtagvalue(TString bDiscriminatorName, unsigned int jetIndx);

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern CMS3 cms3;
#endif

namespace tas {
  const vector<string> &genweightsID();
  const TBits &hlt_bits();
  const vector<TString> &evt_CMS3tag();
  const vector<TString> &evt_dataset();
  const vector<TString> &hlt_trigNames();
  const vector<TString> &pfjets_bDiscriminatorNames();
  const vector<TString> &pfjets_puppi_bDiscriminatorNames();
  const vector<TString> &taus_pf_IDnames();
  const bool &evt_cscTightHaloId();
  const bool &evt_hbheFilter();
  const bool &filt_chargedHadronTrackResolution();
  const bool &filt_cscBeamHalo();
  const bool &filt_cscBeamHalo2015();
  const bool &filt_cscBeamHaloTrkMuUnveto();
  const bool &filt_ecalBoundaryEnergy();
  const bool &filt_ecalLaser();
  const bool &filt_ecalTP();
  const bool &filt_eeBadSc();
  const bool &filt_globalSuperTightHalo2016();
  const bool &filt_globalTightHalo2016();
  const bool &filt_goodVertices();
  const bool &filt_hbheNoise();
  const bool &filt_hbheNoiseIso();
  const bool &filt_hcalLaser();
  const bool &filt_hcalStrip();
  const bool &filt_metfilter();
  const bool &filt_muonBadTrack();
  const bool &filt_trackingFailure();
  const bool &filt_trkPOGFilters();
  const bool &filt_trkPOG_logErrorTooManyClusters();
  const bool &filt_trkPOG_manystripclus53X();
  const bool &filt_trkPOG_toomanystripclus53X();
  const vector<bool> &els_conv_vtx_flag();
  const vector<bool> &els_isGsfCtfScPixChargeConsistent();
  const vector<bool> &genps_fromHardProcessBeforeFSR();
  const vector<bool> &genps_fromHardProcessDecayed();
  const vector<bool> &genps_fromHardProcessFinalState();
  const vector<bool> &genps_isDirectHardProcessTauDecayProductFinalState();
  const vector<bool> &genps_isDirectPromptTauDecayProductFinalState();
  const vector<bool> &genps_isHardProcess();
  const vector<bool> &genps_isLastCopy();
  const vector<bool> &genps_isLastCopyBeforeFSR();
  const vector<bool> &genps_isMostlyLikePythia6Status3();
  const vector<bool> &genps_isPromptDecayed();
  const vector<bool> &genps_isPromptFinalState();
  const vector<bool> &isotracks_isHighPurityTrack();
  const vector<bool> &isotracks_isPFCand();
  const vector<bool> &isotracks_isTightTrack();
  const vector<bool> &pfcands_isGlobalMuon();
  const vector<bool> &pfcands_isStandAloneMuon();
  const vector<bool> &pfcands_trackHighPurity();
  const vector<bool> &photons_haspixelSeed();
  const vector<bool> &photons_passElectronVeto();
  const float &evt_bField();
  const float &evt_instantLumi();
  const float &evt_instantLumiErr();
  const float &evt_lumiFill();
  const float &evt_lumiRun();
  const float &evt_pileup();
  const float &evt_pileupRMS();
  const float &evt_fixgrid_all_rho();
  const float &evt_fixgridfastjet_allcalo_rho();
  const float &evt_fixgridfastjet_central_rho();
  const float &evt_fixgridfastjet_all_rho();
  const float &evt_fixgridfastjet_centralcalo_rho();
  const float &evt_fixgridfastjet_centralchargedpileup_rho();
  const float &evt_fixgridfastjet_centralneutral_rho();
  const float &evt_kfactor();
  const float &evt_scale1fb();
  const float &evt_xsec_excl();
  const float &evt_xsec_incl();
  const float &genps_alphaQCD();
  const float &genps_pthat();
  const float &genps_qScale();
  const float &genps_weight();
  const float &gen_sumEt();
  const float &pdfinfo_pdf1();
  const float &pdfinfo_pdf2();
  const float &pdfinfo_scale();
  const float &pdfinfo_x1();
  const float &pdfinfo_x2();
  const float &evt_calomet();
  const float &evt_calometPhi();
  const float &evt_pfmet();
  const float &evt_pfmet_ElectronEnDown();
  const float &evt_pfmet_ElectronEnUp();
  const float &evt_pfmet_JetEnDown();
  const float &evt_pfmet_JetEnUp();
  const float &evt_pfmet_JetResDown();
  const float &evt_pfmet_JetResUp();
  const float &evt_pfmet_MuonEnDown();
  const float &evt_pfmet_MuonEnUp();
  const float &evt_pfmetPhi();
  const float &evt_pfmetPhi_ElectronEnDown();
  const float &evt_pfmetPhi_ElectronEnUp();
  const float &evt_pfmetPhi_JetEnDown();
  const float &evt_pfmetPhi_JetEnUp();
  const float &evt_pfmetPhi_JetResDown();
  const float &evt_pfmetPhi_JetResUp();
  const float &evt_pfmetPhi_MuonEnDown();
  const float &evt_pfmetPhi_MuonEnUp();
  const float &evt_pfmetPhi_PhotonEnDown();
  const float &evt_pfmetPhi_PhotonEnUp();
  const float &evt_pfmetPhi_TauEnDown();
  const float &evt_pfmetPhi_TauEnUp();
  const float &evt_pfmetPhi_UnclusteredEnDown();
  const float &evt_pfmetPhi_UnclusteredEnUp();
  const float &evt_pfmetPhi_raw();
  const float &evt_pfmet_PhotonEnDown();
  const float &evt_pfmet_PhotonEnUp();
  const float &evt_pfmetSig();
  const float &evt_pfmetSignificance();
  const float &evt_pfmet_TauEnDown();
  const float &evt_pfmet_TauEnUp();
  const float &evt_pfmet_UnclusteredEnDown();
  const float &evt_pfmet_UnclusteredEnUp();
  const float &evt_pfmet_raw();
  const float &evt_pfsumet();
  const float &evt_pfsumet_raw();
  const float &gen_met();
  const float &gen_metPhi();
  const float &evt_puppi_calomet();
  const float &evt_puppi_calometPhi();
  const float &evt_puppi_pfmet();
  const float &evt_puppi_pfmet_ElectronEnDown();
  const float &evt_puppi_pfmet_ElectronEnUp();
  const float &evt_puppi_pfmet_JetEnDown();
  const float &evt_puppi_pfmet_JetEnUp();
  const float &evt_puppi_pfmet_JetResDown();
  const float &evt_puppi_pfmet_JetResUp();
  const float &evt_puppi_pfmet_MuonEnDown();
  const float &evt_puppi_pfmet_MuonEnUp();
  const float &evt_puppi_pfmetPhi();
  const float &evt_puppi_pfmetPhi_ElectronEnDown();
  const float &evt_puppi_pfmetPhi_ElectronEnUp();
  const float &evt_puppi_pfmetPhi_JetEnDown();
  const float &evt_puppi_pfmetPhi_JetEnUp();
  const float &evt_puppi_pfmetPhi_JetResDown();
  const float &evt_puppi_pfmetPhi_JetResUp();
  const float &evt_puppi_pfmetPhi_MuonEnDown();
  const float &evt_puppi_pfmetPhi_MuonEnUp();
  const float &evt_puppi_pfmetPhi_PhotonEnDown();
  const float &evt_puppi_pfmetPhi_PhotonEnUp();
  const float &evt_puppi_pfmetPhi_TauEnDown();
  const float &evt_puppi_pfmetPhi_TauEnUp();
  const float &evt_puppi_pfmetPhi_UnclusteredEnDown();
  const float &evt_puppi_pfmetPhi_UnclusteredEnUp();
  const float &evt_puppi_pfmetPhi_raw();
  const float &evt_puppi_pfmet_PhotonEnDown();
  const float &evt_puppi_pfmet_PhotonEnUp();
  const float &evt_puppi_pfmetSig();
  const float &evt_puppi_pfmetSignificance();
  const float &evt_puppi_pfmet_TauEnDown();
  const float &evt_puppi_pfmet_TauEnUp();
  const float &evt_puppi_pfmet_UnclusteredEnDown();
  const float &evt_puppi_pfmet_UnclusteredEnUp();
  const float &evt_puppi_pfmet_raw();
  const float &evt_puppi_pfsumet();
  const float &evt_puppi_pfsumet_raw();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_motherp4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_motherp4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_mc_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_mc_motherp4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_mc_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_mc_patMatch_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4In();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_p4Out();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_trk_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_trk_vertex_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &els_vertex_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genjets_p4NoMuNoNu();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_ll_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_lt_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &hyp_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &isotracks_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_bfit_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_gfit_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_mc_patMatch_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_pfp4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &mus_trk_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfcands_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_puppi_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &taus_pf_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &photons_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &svs_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &svs_position();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_softdropPuppiSubjet1();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_softdropPuppiSubjet2();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &vtxs_position();
  const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &genps_lepdaughter_p4();
  const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &pfjets_pfcandmup4();
  const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &pfjets_puppi_pfcandmup4();
  const vector<float> &els_mc3dr();
  const vector<float> &els_mcdr();
  const vector<float> &mus_mc3dr();
  const vector<float> &mus_mcdr();
  const vector<float> &pfjets_mc3dr();
  const vector<float> &pfjets_mcdr();
  const vector<float> &photons_mc3dr();
  const vector<float> &photons_mcdr();
  const vector<float> &els_VIDNonTrigMvaValue();
  const vector<float> &els_VIDSpring16GPMvaValue();
  const vector<float> &els_VIDSpring16HZZMvaValue();
  const vector<float> &els_VIDTrigMvaValue();
  const vector<float> &els_chi2();
  const vector<float> &els_ckf_chi2();
  const vector<float> &els_ckf_ndof();
  const vector<float> &els_conv_vtx_prob();
  const vector<float> &els_d0Err();
  const vector<float> &els_dEtaIn();
  const vector<float> &els_dEtaOut();
  const vector<float> &els_dPhiIn();
  const vector<float> &els_dPhiOut();
  const vector<float> &els_dxyPV();
  const vector<float> &els_dzPV();
  const vector<float> &els_e1x5_full5x5();
  const vector<float> &els_e2x5Max_full5x5();
  const vector<float> &els_e5x5_full5x5();
  const vector<float> &els_eOverPIn();
  const vector<float> &els_eOverPOut();
  const vector<float> &els_eSC();
  const vector<float> &els_eSCPresh();
  const vector<float> &els_eSCRaw();
  const vector<float> &els_eSeed();
  const vector<float> &els_ecalEnergy();
  const vector<float> &els_ecalEnergyError();
  const vector<float> &els_ecalIso();
  const vector<float> &els_ecalIso04();
  const vector<float> &els_ecalPFClusterIso();
  const vector<float> &els_etaSC();
  const vector<float> &els_etaSCwidth();
  const vector<float> &els_fbrem();
  const vector<float> &els_full5x5_hOverE();
  const vector<float> &els_hOverE();
  const vector<float> &els_hcalDepth1TowerSumEt();
  const vector<float> &els_hcalIso();
  const vector<float> &els_hcalIso04();
  const vector<float> &els_hcalPFClusterIso();
  const vector<float> &els_ip2d();
  const vector<float> &els_ip2derr();
  const vector<float> &els_ip3d();
  const vector<float> &els_ip3derr();
  const vector<float> &els_mc_patMatch_dr();
  const vector<float> &els_miniIso_ch();
  const vector<float> &els_miniIso_db();
  const vector<float> &els_miniIso_em();
  const vector<float> &els_miniIso_nh();
  const vector<float> &els_miniIso_uncor();
  const vector<float> &els_ndof();
  const vector<float> &els_pfChargedHadronIso();
  const vector<float> &els_pfNeutralHadronIso();
  const vector<float> &els_pfPUIso();
  const vector<float> &els_pfPhotonIso();
  const vector<float> &els_phiSC();
  const vector<float> &els_phiSCwidth();
  const vector<float> &els_ptErr();
  const vector<float> &els_ptErrGsf();
  const vector<float> &els_r9();
  const vector<float> &els_r9_full5x5();
  const vector<float> &els_scSeedEta();
  const vector<float> &els_sigmaEtaEta_full5x5();
  const vector<float> &els_sigmaIEtaIEta();
  const vector<float> &els_sigmaIEtaIEta_full5x5();
  const vector<float> &els_sigmaIPhiIPhi();
  const vector<float> &els_sigmaIPhiIPhi_full5x5();
  const vector<float> &els_tkIso();
  const vector<float> &els_tkIso04();
  const vector<float> &els_trackMomentumError();
  const vector<float> &els_trkdr();
  const vector<float> &els_trkshFrac();
  const vector<float> &els_z0Err();
  const vector<float> &genps_charge();
  const vector<float> &genps_iso();
  const vector<float> &genweights();
  const vector<float> &isotracks_dEdxPixel();
  const vector<float> &isotracks_dEdxStrip();
  const vector<float> &isotracks_deltaEta();
  const vector<float> &isotracks_deltaPhi();
  const vector<float> &isotracks_dxy();
  const vector<float> &isotracks_dxyError();
  const vector<float> &isotracks_dz();
  const vector<float> &isotracks_dzError();
  const vector<float> &isotracks_matchedCaloJetEmEnergy();
  const vector<float> &isotracks_matchedCaloJetHadEnergy();
  const vector<float> &isotracks_miniIso_ch();
  const vector<float> &isotracks_miniIso_db();
  const vector<float> &isotracks_miniIso_em();
  const vector<float> &isotracks_miniIso_nh();
  const vector<float> &isotracks_pfIso_ch();
  const vector<float> &isotracks_pfIso_db();
  const vector<float> &isotracks_pfIso_em();
  const vector<float> &isotracks_pfIso_nh();
  const vector<float> &mus_bfit_ptErr();
  const vector<float> &mus_caloCompatibility();
  const vector<float> &mus_chi2LocalMomentum();
  const vector<float> &mus_chi2LocalPosition();
  const vector<float> &mus_d0Err();
  const vector<float> &mus_dxyPV();
  const vector<float> &mus_dzPV();
  const vector<float> &mus_ecal_time();
  const vector<float> &mus_gfit_chi2();
  const vector<float> &mus_gfit_ptErr();
  const vector<float> &mus_hcal_time();
  const vector<float> &mus_ip2d();
  const vector<float> &mus_ip2derr();
  const vector<float> &mus_ip3d();
  const vector<float> &mus_ip3derr();
  const vector<float> &mus_iso03_emEt();
  const vector<float> &mus_iso03_hadEt();
  const vector<float> &mus_iso03_sumPt();
  const vector<float> &mus_isoR03_pf_ChargedHadronPt();
  const vector<float> &mus_isoR03_pf_ChargedParticlePt();
  const vector<float> &mus_isoR03_pf_NeutralHadronEt();
  const vector<float> &mus_isoR03_pf_NeutralHadronEtHighThreshold();
  const vector<float> &mus_isoR03_pf_PUPt();
  const vector<float> &mus_isoR03_pf_PhotonEt();
  const vector<float> &mus_isoR03_pf_PhotonEtHighThreshold();
  const vector<float> &mus_isoR04_pf_ChargedHadronPt();
  const vector<float> &mus_isoR04_pf_ChargedParticlePt();
  const vector<float> &mus_isoR04_pf_NeutralHadronEt();
  const vector<float> &mus_isoR04_pf_NeutralHadronEtHighThreshold();
  const vector<float> &mus_isoR04_pf_PUPt();
  const vector<float> &mus_isoR04_pf_PhotonEt();
  const vector<float> &mus_isoR04_pf_PhotonEtHighThreshold();
  const vector<float> &mus_iso_ecalvetoDep();
  const vector<float> &mus_iso_hcalvetoDep();
  const vector<float> &mus_iso_hovetoDep();
  const vector<float> &mus_iso_trckvetoDep();
  const vector<float> &mus_mc_patMatch_dr();
  const vector<float> &mus_miniIso_ch();
  const vector<float> &mus_miniIso_db();
  const vector<float> &mus_miniIso_em();
  const vector<float> &mus_miniIso_nh();
  const vector<float> &mus_miniIso_uncor();
  const vector<float> &mus_ptErr();
  const vector<float> &mus_segmCompatibility();
  const vector<float> &mus_trkKink();
  const vector<float> &mus_z0Err();
  const vector<float> &pfcands_dxy();
  const vector<float> &pfcands_dxyError();
  const vector<float> &pfcands_dz();
  const vector<float> &pfcands_dzAssociatedPV();
  const vector<float> &pfcands_dzError();
  const vector<float> &pfcands_mass();
  const vector<float> &pfcands_miniTrackIso();
  const vector<float> &pfcands_puppiWeight();
  const vector<float> &pfcands_puppiWeightNoLep();
  const vector<float> &pfcands_trackIso();
  const vector<float> &pfjets_area();
  const vector<float> &pfjets_axis1();
  const vector<float> &pfjets_chargedEmE();
  const vector<float> &pfjets_chargedHadronE();
  const vector<float> &pfjets_electronE();
  const vector<float> &pfjets_hfEmE();
  const vector<float> &pfjets_hfHadronE();
  const vector<float> &pfjets_muonE();
  const vector<float> &pfjets_neutralEmE();
  const vector<float> &pfjets_neutralHadronE();
  const vector<float> &pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag();
  const vector<float> &pfjets_pfDeepCSVJetTagsprobbPlusprobbb();
  const vector<float> &pfjets_photonE();
  const vector<float> &pfjets_pileupJetId();
  const vector<float> &pfjets_ptDistribution();
  const vector<float> &pfjets_undoJEC();
  const vector<float> &pfjets_puppi_area();
  const vector<float> &pfjets_puppi_axis1();
  const vector<float> &pfjets_puppi_chargedEmE();
  const vector<float> &pfjets_puppi_chargedHadronE();
  const vector<float> &pfjets_puppi_electronE();
  const vector<float> &pfjets_puppi_hfEmE();
  const vector<float> &pfjets_puppi_hfHadronE();
  const vector<float> &pfjets_puppi_muonE();
  const vector<float> &pfjets_puppi_neutralEmE();
  const vector<float> &pfjets_puppi_neutralHadronE();
  const vector<float> &pfjets_puppi_pfCombinedInclusiveSecondaryVertexV2BJetTag();
  const vector<float> &pfjets_puppi_pfDeepCSVJetTagsprobbPlusprobbb();
  const vector<float> &pfjets_puppi_photonE();
  const vector<float> &pfjets_puppi_pileupJetId();
  const vector<float> &pfjets_puppi_ptDistribution();
  const vector<float> &pfjets_puppi_undoJEC();
  const vector<float> &photons_ecalPFClusterIso();
  const vector<float> &photons_full5x5_hOverE();
  const vector<float> &photons_full5x5_hOverEtowBC();
  const vector<float> &photons_full5x5_r9();
  const vector<float> &photons_full5x5_sigmaIEtaIEta();
  const vector<float> &photons_hOverE();
  const vector<float> &photons_hOverEtowBC();
  const vector<float> &photons_hcalPFClusterIso();
  const vector<float> &photons_ntkIsoHollow03();
  const vector<float> &photons_recoChargedHadronIso();
  const vector<float> &photons_recoNeutralHadronIso();
  const vector<float> &photons_recoPhotonIso();
  const vector<float> &photons_sigmaIEtaIEta();
  const vector<float> &photons_tkIsoHollow03();
  const vector<float> &puInfo_trueNumInteractions();
  const vector<float> &svs_anglePV();
  const vector<float> &svs_chi2();
  const vector<float> &svs_dist3Dsig();
  const vector<float> &svs_dist3Dval();
  const vector<float> &svs_distXYsig();
  const vector<float> &svs_distXYval();
  const vector<float> &svs_ndof();
  const vector<float> &svs_prob();
  const vector<float> &svs_xError();
  const vector<float> &svs_yError();
  const vector<float> &svs_zError();
  const vector<float> &ak8jets_area();
  const vector<float> &ak8jets_mass();
  const vector<float> &ak8jets_nJettinessTau1();
  const vector<float> &ak8jets_nJettinessTau2();
  const vector<float> &ak8jets_nJettinessTau3();
  const vector<float> &ak8jets_prunedMass();
  const vector<float> &ak8jets_puppi_eta();
  const vector<float> &ak8jets_puppi_mass();
  const vector<float> &ak8jets_puppi_nJettinessTau1();
  const vector<float> &ak8jets_puppi_nJettinessTau2();
  const vector<float> &ak8jets_puppi_nJettinessTau3();
  const vector<float> &ak8jets_puppi_phi();
  const vector<float> &ak8jets_puppi_pt();
  const vector<float> &ak8jets_puppi_softdropMass();
  const vector<float> &ak8jets_softdropMass();
  const vector<float> &ak8jets_undoJEC();
  const vector<float> &vtxs_ndof();
  const vector<vector<float> > &pfjets_bDiscriminators();
  const vector<vector<float> > &pfjets_puppi_bDiscriminators();
  const vector<vector<float> > &taus_pf_IDs();
  const vector<vector<float> > &puInfo_instLumi();
  const int &evt_bunchCrossing();
  const int &evt_experimentType();
  const int &evt_isRealData();
  const int &evt_orbitNumber();
  const int &evt_storeNumber();
  const int &pdfinfo_id1();
  const int &pdfinfo_id2();
  const vector<int> &els_mc3_id();
  const vector<int> &els_mc3idx();
  const vector<int> &els_mc3_motherid();
  const vector<int> &els_mc3_motheridx();
  const vector<int> &els_mc_id();
  const vector<int> &els_mc_motherid();
  const vector<int> &mus_mc3_id();
  const vector<int> &mus_mc3idx();
  const vector<int> &mus_mc3_motherid();
  const vector<int> &mus_mc3_motheridx();
  const vector<int> &mus_mc_id();
  const vector<int> &mus_mc_motherid();
  const vector<int> &pfjets_mc3_id();
  const vector<int> &pfjets_mc3idx();
  const vector<int> &pfjets_mc_motherid();
  const vector<int> &photons_mc3_id();
  const vector<int> &photons_mc3idx();
  const vector<int> &photons_mc3_motherid();
  const vector<int> &photons_mc3_motheridx();
  const vector<int> &photons_mc_id();
  const vector<int> &photons_mc_motherid();
  const vector<int> &els_VIDNonTrigMvaCat();
  const vector<int> &els_VIDSpring16GPMvaCat();
  const vector<int> &els_VIDSpring16HZZMvaCat();
  const vector<int> &els_VIDTrigMvaCat();
  const vector<int> &els_category();
  const vector<int> &els_charge();
  const vector<int> &els_ckf_charge();
  const vector<int> &els_ckf_laywithmeas();
  const vector<int> &els_exp_innerlayers();
  const vector<int> &els_exp_outerlayers();
  const vector<int> &els_isEB();
  const vector<int> &els_isEcalDriven();
  const vector<int> &els_isTrackerDriven();
  const vector<int> &els_lostHits();
  const vector<int> &els_lost_pixelhits();
  const vector<int> &els_mc_patMatch_id();
  const vector<int> &els_nlayers();
  const vector<int> &els_nlayers3D();
  const vector<int> &els_nlayersLost();
  const vector<int> &els_sccharge();
  const vector<int> &els_trk_charge();
  const vector<int> &els_type();
  const vector<int> &els_validHits();
  const vector<int> &els_valid_pixelhits();
  const vector<int> &els_passVIDNonTrigMvaWP80Id();
  const vector<int> &els_passVIDNonTrigMvaWP90Id();
  const vector<int> &els_passVIDTrigMvaWP80Id();
  const vector<int> &els_passVIDTrigMvaWP90Id();
  const vector<int> &genps_id();
  const vector<int> &genps_id_mother();
  const vector<int> &genps_id_simplegrandma();
  const vector<int> &genps_id_simplemother();
  const vector<int> &genps_idx_mother();
  const vector<int> &genps_idx_simplemother();
  const vector<int> &genps_status();
  const vector<int> &hyp_ll_charge();
  const vector<int> &hyp_ll_id();
  const vector<int> &hyp_ll_index();
  const vector<int> &hyp_lt_charge();
  const vector<int> &hyp_lt_id();
  const vector<int> &hyp_lt_index();
  const vector<int> &hyp_type();
  const vector<int> &isotracks_charge();
  const vector<int> &isotracks_fromPV();
  const vector<int> &isotracks_numberOfLostHitsInner();
  const vector<int> &isotracks_numberOfLostHitsOuter();
  const vector<int> &isotracks_numberOfLostPixelHitsInner();
  const vector<int> &isotracks_numberOfValidPixelHits();
  const vector<int> &isotracks_particleId();
  const vector<int> &isotracks_pixelLayersWithMeasurement();
  const vector<int> &isotracks_trackerLayersWithMeasurement();
  const vector<int> &mus_algo();
  const vector<int> &mus_algoOrig();
  const vector<int> &mus_bfit_algo();
  const vector<int> &mus_charge();
  const vector<int> &mus_exp_innerlayers();
  const vector<int> &mus_exp_outerlayers();
  const vector<int> &mus_gfit_algo();
  const vector<int> &mus_gfit_ndof();
  const vector<int> &mus_gfit_validSTAHits();
  const vector<int> &mus_iso03_ntrk();
  const vector<int> &mus_lostHits();
  const vector<int> &mus_mc_patMatch_id();
  const vector<int> &mus_nlayers();
  const vector<int> &mus_numberOfMatchedStations();
  const vector<int> &mus_pfcharge();
  const vector<int> &mus_pfidx();
  const vector<int> &mus_pfparticleId();
  const vector<int> &mus_pid_PFMuon();
  const vector<int> &mus_pid_TM2DCompatibilityLoose();
  const vector<int> &mus_pid_TM2DCompatibilityTight();
  const vector<int> &mus_pid_TMLastStationLoose();
  const vector<int> &mus_pid_TMLastStationTight();
  const vector<int> &mus_pid_TMOneStationTight();
  const vector<int> &mus_type();
  const vector<int> &mus_validHits();
  const vector<int> &mus_validPixelHits();
  const vector<int> &pfcands_IdAssociatedPV();
  const vector<int> &pfcands_charge();
  const vector<int> &pfcands_numberOfHits();
  const vector<int> &pfcands_numberOfPixelHits();
  const vector<int> &pfcands_particleId();
  const vector<int> &pfcands_pixelLayersWithMeasurement();
  const vector<int> &pfcands_stripLayersWithMeasurement();
  const vector<int> &pfjets_chargedHadronMultiplicity();
  const vector<int> &pfjets_chargedMultiplicity();
  const vector<int> &pfjets_electronMultiplicity();
  const vector<int> &pfjets_hadronFlavour();
  const vector<int> &pfjets_muonMultiplicity();
  const vector<int> &pfjets_neutralHadronMultiplicity();
  const vector<int> &pfjets_neutralMultiplicity();
  const vector<int> &pfjets_npfcands();
  const vector<int> &pfjets_partonFlavour();
  const vector<int> &pfjets_photonMultiplicity();
  const vector<int> &pfjets_totalMultiplicity();
  const vector<int> &pfjets_puppi_chargedHadronMultiplicity();
  const vector<int> &pfjets_puppi_chargedMultiplicity();
  const vector<int> &pfjets_puppi_electronMultiplicity();
  const vector<int> &pfjets_puppi_hadronFlavour();
  const vector<int> &pfjets_puppi_muonMultiplicity();
  const vector<int> &pfjets_puppi_neutralHadronMultiplicity();
  const vector<int> &pfjets_puppi_neutralMultiplicity();
  const vector<int> &pfjets_puppi_npfcands();
  const vector<int> &pfjets_puppi_partonFlavour();
  const vector<int> &pfjets_puppi_photonMultiplicity();
  const vector<int> &pfjets_puppi_totalMultiplicity();
  const vector<int> &taus_pf_charge();
  const vector<int> &photons_photonID_loose();
  const vector<int> &photons_photonID_tight();
  const vector<int> &puInfo_bunchCrossing();
  const vector<int> &puInfo_nPUvertices();
  const vector<int> &svs_nTrks();
  const vector<int> &_npfcands();
  const vector<int> &ak8jets_partonFlavour();
  const vector<int> &vtxs_isFake();
  const vector<int> &vtxs_isValid();
  const vector<vector<int> > &genps_lepdaughter_id();
  const vector<vector<int> > &genps_lepdaughter_idx();
  const vector<vector<int> > &photons_PFCand_idx();
  const vector<unsigned char> &pfcands_fromPV();
  const vector<unsigned char> &pfcands_normalizedChi2();
  const vector<unsigned char> &pfcands_packedHits();
  const vector<unsigned char> &pfcands_packedLayers();
  const vector<unsigned char> &pfcands_pvAssociationQuality();
  const unsigned int &evt_nels();
  const unsigned int &evt_detectorStatus();
  const unsigned int &evt_lumiBlock();
  const unsigned int &evt_run();
  const unsigned int &evt_ngenjetsNoMuNoNu();
  const unsigned int &genps_signalProcessID();
  const unsigned int &evt_nphotons();
  const unsigned int &evt_nvtxs();
  const vector<unsigned int> &hlt_l1prescales();
  const vector<unsigned int> &hlt_prescales();
  const vector<vector<unsigned int> > &isotracks_crossedHcalStatus();
  const ULong64_t &evt_event();
  const vector<ULong64_t> &evt_timestamp();
  bool passHLTTrigger(TString trigName);
  float passTauID(TString idName, unsigned int tauIndx);
  float getbtagvalue(TString bDiscriminatorName, unsigned int jetIndx);
}
#endif
